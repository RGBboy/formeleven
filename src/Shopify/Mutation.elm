-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Mutation exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Shopify.InputObject
import Shopify.Interface
import Shopify.Object
import Shopify.Scalar
import Shopify.ScalarCodecs
import Shopify.Union


type alias CartAttributesUpdateRequiredArguments =
    { attributes : List Shopify.InputObject.AttributeInput
    , cartId : Shopify.ScalarCodecs.Id
    }


{-| Updates the attributes on a cart.

  - attributes - An array of key-value pairs that contains additional information about the cart.
  - cartId - The ID of the cart.

-}
cartAttributesUpdate :
    CartAttributesUpdateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CartAttributesUpdatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
cartAttributesUpdate requiredArgs____ object____ =
    Object.selectionForCompositeField "cartAttributesUpdate" [ Argument.required "attributes" requiredArgs____.attributes (Shopify.InputObject.encodeAttributeInput |> Encode.list), Argument.required "cartId" requiredArgs____.cartId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CartBuyerIdentityUpdateRequiredArguments =
    { cartId : Shopify.ScalarCodecs.Id
    , buyerIdentity : Shopify.InputObject.CartBuyerIdentityInput
    }


{-| Updates customer information associated with a cart.
Buyer identity is used to determine
[international pricing](https://shopify.dev/api/examples/international-pricing#create-a-checkout)
and should match the customer's shipping address.

  - cartId - The ID of the cart.
  - buyerIdentity - The customer associated with the cart. Used to determine [international pricing](https://shopify.dev/api/examples/international-pricing#create-a-checkout). Buyer identity should match the customer's shipping address.

-}
cartBuyerIdentityUpdate :
    CartBuyerIdentityUpdateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CartBuyerIdentityUpdatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
cartBuyerIdentityUpdate requiredArgs____ object____ =
    Object.selectionForCompositeField "cartBuyerIdentityUpdate" [ Argument.required "cartId" requiredArgs____.cartId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "buyerIdentity" requiredArgs____.buyerIdentity Shopify.InputObject.encodeCartBuyerIdentityInput ] object____ (Basics.identity >> Decode.nullable)


type alias CartCreateOptionalArguments =
    { input : OptionalArgument Shopify.InputObject.CartInput }


{-| Creates a new cart.

  - input - The fields used to create a cart.

-}
cartCreate :
    (CartCreateOptionalArguments -> CartCreateOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.CartCreatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
cartCreate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { input = Absent }

        optionalArgs____ =
            [ Argument.optional "input" filledInOptionals____.input Shopify.InputObject.encodeCartInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "cartCreate" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias CartDiscountCodesUpdateOptionalArguments =
    { discountCodes : OptionalArgument (List String) }


type alias CartDiscountCodesUpdateRequiredArguments =
    { cartId : Shopify.ScalarCodecs.Id }


{-| Updates the discount codes applied to the cart.

  - cartId - The ID of the cart.
  - discountCodes - The case-insensitive discount codes that the customer added at checkout.

-}
cartDiscountCodesUpdate :
    (CartDiscountCodesUpdateOptionalArguments -> CartDiscountCodesUpdateOptionalArguments)
    -> CartDiscountCodesUpdateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CartDiscountCodesUpdatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
cartDiscountCodesUpdate fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { discountCodes = Absent }

        optionalArgs____ =
            [ Argument.optional "discountCodes" filledInOptionals____.discountCodes (Encode.string |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "cartDiscountCodesUpdate" (optionalArgs____ ++ [ Argument.required "cartId" requiredArgs____.cartId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ]) object____ (Basics.identity >> Decode.nullable)


type alias CartLinesAddRequiredArguments =
    { lines : List Shopify.InputObject.CartLineInput
    , cartId : Shopify.ScalarCodecs.Id
    }


{-| Adds a merchandise line to the cart.

  - lines - A list of merchandise lines to add to the cart.
  - cartId - The ID of the cart.

-}
cartLinesAdd :
    CartLinesAddRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CartLinesAddPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
cartLinesAdd requiredArgs____ object____ =
    Object.selectionForCompositeField "cartLinesAdd" [ Argument.required "lines" requiredArgs____.lines (Shopify.InputObject.encodeCartLineInput |> Encode.list), Argument.required "cartId" requiredArgs____.cartId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CartLinesRemoveRequiredArguments =
    { cartId : Shopify.ScalarCodecs.Id
    , lineIds : List Shopify.ScalarCodecs.Id
    }


{-| Removes one or more merchandise lines from the cart.

  - cartId - The ID of the cart.
  - lineIds - The merchandise line IDs to remove.

-}
cartLinesRemove :
    CartLinesRemoveRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CartLinesRemovePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
cartLinesRemove requiredArgs____ object____ =
    Object.selectionForCompositeField "cartLinesRemove" [ Argument.required "cartId" requiredArgs____.cartId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "lineIds" requiredArgs____.lineIds ((Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias CartLinesUpdateRequiredArguments =
    { cartId : Shopify.ScalarCodecs.Id
    , lines : List Shopify.InputObject.CartLineUpdateInput
    }


{-| Updates one or more merchandise lines on a cart.

  - cartId - The ID of the cart.
  - lines - The merchandise lines to update.

-}
cartLinesUpdate :
    CartLinesUpdateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CartLinesUpdatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
cartLinesUpdate requiredArgs____ object____ =
    Object.selectionForCompositeField "cartLinesUpdate" [ Argument.required "cartId" requiredArgs____.cartId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "lines" requiredArgs____.lines (Shopify.InputObject.encodeCartLineUpdateInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias CartNoteUpdateOptionalArguments =
    { note : OptionalArgument String }


type alias CartNoteUpdateRequiredArguments =
    { cartId : Shopify.ScalarCodecs.Id }


{-| Updates the note on the cart.

  - cartId - The ID of the cart.
  - note - The note on the cart.

-}
cartNoteUpdate :
    (CartNoteUpdateOptionalArguments -> CartNoteUpdateOptionalArguments)
    -> CartNoteUpdateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CartNoteUpdatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
cartNoteUpdate fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { note = Absent }

        optionalArgs____ =
            [ Argument.optional "note" filledInOptionals____.note Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "cartNoteUpdate" (optionalArgs____ ++ [ Argument.required "cartId" requiredArgs____.cartId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ]) object____ (Basics.identity >> Decode.nullable)


type alias CheckoutAttributesUpdateV2RequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id
    , input : Shopify.InputObject.CheckoutAttributesUpdateV2Input
    }


{-| Updates the attributes of a checkout if `allowPartialAddresses` is `true`.

  - checkoutId - The ID of the checkout.
  - input - The checkout attributes to update.

-}
checkoutAttributesUpdateV2 :
    CheckoutAttributesUpdateV2RequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutAttributesUpdateV2Payload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutAttributesUpdateV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutAttributesUpdateV2" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "input" requiredArgs____.input Shopify.InputObject.encodeCheckoutAttributesUpdateV2Input ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutCompleteFreeRequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id }


{-| Completes a checkout without providing payment information. You can use this mutation for free items or items whose purchase price is covered by a gift card.

  - checkoutId - The ID of the checkout.

-}
checkoutCompleteFree :
    CheckoutCompleteFreeRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutCompleteFreePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutCompleteFree requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutCompleteFree" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutCompleteWithCreditCardV2RequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id
    , payment : Shopify.InputObject.CreditCardPaymentInputV2
    }


{-| Completes a checkout using a credit card token from Shopify's card vault. Before you can complete checkouts using CheckoutCompleteWithCreditCardV2, you need to [_request payment processing_](https://shopify.dev/apps/channels/getting-started#request-payment-processing).

  - checkoutId - The ID of the checkout.
  - payment - The credit card info to apply as a payment.

-}
checkoutCompleteWithCreditCardV2 :
    CheckoutCompleteWithCreditCardV2RequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutCompleteWithCreditCardV2Payload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutCompleteWithCreditCardV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutCompleteWithCreditCardV2" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "payment" requiredArgs____.payment Shopify.InputObject.encodeCreditCardPaymentInputV2 ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutCompleteWithTokenizedPaymentV3RequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id
    , payment : Shopify.InputObject.TokenizedPaymentInputV3
    }


{-| Completes a checkout with a tokenized payment.

  - checkoutId - The ID of the checkout.
  - payment - The info to apply as a tokenized payment.

-}
checkoutCompleteWithTokenizedPaymentV3 :
    CheckoutCompleteWithTokenizedPaymentV3RequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutCompleteWithTokenizedPaymentV3Payload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutCompleteWithTokenizedPaymentV3 requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutCompleteWithTokenizedPaymentV3" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "payment" requiredArgs____.payment Shopify.InputObject.encodeTokenizedPaymentInputV3 ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutCreateOptionalArguments =
    { queueToken : OptionalArgument String }


type alias CheckoutCreateRequiredArguments =
    { input : Shopify.InputObject.CheckoutCreateInput }


{-| Creates a new checkout.

  - input - The fields used to create a checkout.
  - queueToken - The checkout queue token. Available only to selected stores.

-}
checkoutCreate :
    (CheckoutCreateOptionalArguments -> CheckoutCreateOptionalArguments)
    -> CheckoutCreateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutCreatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutCreate fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { queueToken = Absent }

        optionalArgs____ =
            [ Argument.optional "queueToken" filledInOptionals____.queueToken Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "checkoutCreate" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input Shopify.InputObject.encodeCheckoutCreateInput ]) object____ (Basics.identity >> Decode.nullable)


type alias CheckoutCustomerAssociateV2RequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id
    , customerAccessToken : String
    }


{-| Associates a customer to the checkout.

  - checkoutId - The ID of the checkout.
  - customerAccessToken - The customer access token of the customer to associate.

-}
checkoutCustomerAssociateV2 :
    CheckoutCustomerAssociateV2RequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutCustomerAssociateV2Payload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutCustomerAssociateV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutCustomerAssociateV2" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "customerAccessToken" requiredArgs____.customerAccessToken Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutCustomerDisassociateV2RequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id }


{-| Disassociates the current checkout customer from the checkout.

  - checkoutId - The ID of the checkout.

-}
checkoutCustomerDisassociateV2 :
    CheckoutCustomerDisassociateV2RequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutCustomerDisassociateV2Payload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutCustomerDisassociateV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutCustomerDisassociateV2" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutDiscountCodeApplyV2RequiredArguments =
    { discountCode : String
    , checkoutId : Shopify.ScalarCodecs.Id
    }


{-| Applies a discount to an existing checkout using a discount code.

  - discountCode - The discount code to apply to the checkout.
  - checkoutId - The ID of the checkout.

-}
checkoutDiscountCodeApplyV2 :
    CheckoutDiscountCodeApplyV2RequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutDiscountCodeApplyV2Payload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutDiscountCodeApplyV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutDiscountCodeApplyV2" [ Argument.required "discountCode" requiredArgs____.discountCode Encode.string, Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutDiscountCodeRemoveRequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id }


{-| Removes the applied discounts from an existing checkout.

  - checkoutId - The ID of the checkout.

-}
checkoutDiscountCodeRemove :
    CheckoutDiscountCodeRemoveRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutDiscountCodeRemovePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutDiscountCodeRemove requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutDiscountCodeRemove" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutEmailUpdateV2RequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id
    , email : String
    }


{-| Updates the email on an existing checkout.

  - checkoutId - The ID of the checkout.
  - email - The email to update the checkout with.

-}
checkoutEmailUpdateV2 :
    CheckoutEmailUpdateV2RequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutEmailUpdateV2Payload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutEmailUpdateV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutEmailUpdateV2" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "email" requiredArgs____.email Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutGiftCardRemoveV2RequiredArguments =
    { appliedGiftCardId : Shopify.ScalarCodecs.Id
    , checkoutId : Shopify.ScalarCodecs.Id
    }


{-| Removes an applied gift card from the checkout.

  - appliedGiftCardId - The ID of the Applied Gift Card to remove from the Checkout.
  - checkoutId - The ID of the checkout.

-}
checkoutGiftCardRemoveV2 :
    CheckoutGiftCardRemoveV2RequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutGiftCardRemoveV2Payload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutGiftCardRemoveV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutGiftCardRemoveV2" [ Argument.required "appliedGiftCardId" requiredArgs____.appliedGiftCardId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutGiftCardsAppendRequiredArguments =
    { giftCardCodes : List String
    , checkoutId : Shopify.ScalarCodecs.Id
    }


{-| Appends gift cards to an existing checkout.

  - giftCardCodes - A list of gift card codes to append to the checkout.
  - checkoutId - The ID of the checkout.

-}
checkoutGiftCardsAppend :
    CheckoutGiftCardsAppendRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutGiftCardsAppendPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutGiftCardsAppend requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutGiftCardsAppend" [ Argument.required "giftCardCodes" requiredArgs____.giftCardCodes (Encode.string |> Encode.list), Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutLineItemsAddRequiredArguments =
    { lineItems : List Shopify.InputObject.CheckoutLineItemInput
    , checkoutId : Shopify.ScalarCodecs.Id
    }


{-| Adds a list of line items to a checkout.

  - lineItems - A list of line item objects to add to the checkout.
  - checkoutId - The ID of the checkout.

-}
checkoutLineItemsAdd :
    CheckoutLineItemsAddRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutLineItemsAddPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutLineItemsAdd requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutLineItemsAdd" [ Argument.required "lineItems" requiredArgs____.lineItems (Shopify.InputObject.encodeCheckoutLineItemInput |> Encode.list), Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutLineItemsRemoveRequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id
    , lineItemIds : List Shopify.ScalarCodecs.Id
    }


{-| Removes line items from an existing checkout.

  - checkoutId - The checkout on which to remove line items.
  - lineItemIds - Line item ids to remove.

-}
checkoutLineItemsRemove :
    CheckoutLineItemsRemoveRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutLineItemsRemovePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutLineItemsRemove requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutLineItemsRemove" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "lineItemIds" requiredArgs____.lineItemIds ((Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutLineItemsReplaceRequiredArguments =
    { lineItems : List Shopify.InputObject.CheckoutLineItemInput
    , checkoutId : Shopify.ScalarCodecs.Id
    }


{-| Sets a list of line items to a checkout.

  - lineItems - A list of line item objects to set on the checkout.
  - checkoutId - The ID of the checkout.

-}
checkoutLineItemsReplace :
    CheckoutLineItemsReplaceRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutLineItemsReplacePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutLineItemsReplace requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutLineItemsReplace" [ Argument.required "lineItems" requiredArgs____.lineItems (Shopify.InputObject.encodeCheckoutLineItemInput |> Encode.list), Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutLineItemsUpdateRequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id
    , lineItems : List Shopify.InputObject.CheckoutLineItemUpdateInput
    }


{-| Updates line items on a checkout.

  - checkoutId - The checkout on which to update line items.
  - lineItems - Line items to update.

-}
checkoutLineItemsUpdate :
    CheckoutLineItemsUpdateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutLineItemsUpdatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutLineItemsUpdate requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutLineItemsUpdate" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "lineItems" requiredArgs____.lineItems (Shopify.InputObject.encodeCheckoutLineItemUpdateInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutShippingAddressUpdateV2RequiredArguments =
    { shippingAddress : Shopify.InputObject.MailingAddressInput
    , checkoutId : Shopify.ScalarCodecs.Id
    }


{-| Updates the shipping address of an existing checkout.

  - shippingAddress - The shipping address to where the line items will be shipped.
  - checkoutId - The ID of the checkout.

-}
checkoutShippingAddressUpdateV2 :
    CheckoutShippingAddressUpdateV2RequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutShippingAddressUpdateV2Payload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutShippingAddressUpdateV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutShippingAddressUpdateV2" [ Argument.required "shippingAddress" requiredArgs____.shippingAddress Shopify.InputObject.encodeMailingAddressInput, Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CheckoutShippingLineUpdateRequiredArguments =
    { checkoutId : Shopify.ScalarCodecs.Id
    , shippingRateHandle : String
    }


{-| Updates the shipping lines on an existing checkout.

  - checkoutId - The ID of the checkout.
  - shippingRateHandle - A unique identifier to a Checkout’s shipping provider, price, and title combination, enabling the customer to select the availableShippingRates.

-}
checkoutShippingLineUpdate :
    CheckoutShippingLineUpdateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CheckoutShippingLineUpdatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
checkoutShippingLineUpdate requiredArgs____ object____ =
    Object.selectionForCompositeField "checkoutShippingLineUpdate" [ Argument.required "checkoutId" requiredArgs____.checkoutId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "shippingRateHandle" requiredArgs____.shippingRateHandle Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerAccessTokenCreateRequiredArguments =
    { input : Shopify.InputObject.CustomerAccessTokenCreateInput }


{-| Creates a customer access token.
The customer access token is required to modify the customer object in any way.

  - input - The fields used to create a customer access token.

-}
customerAccessTokenCreate :
    CustomerAccessTokenCreateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerAccessTokenCreatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerAccessTokenCreate requiredArgs____ object____ =
    Object.selectionForCompositeField "customerAccessTokenCreate" [ Argument.required "input" requiredArgs____.input Shopify.InputObject.encodeCustomerAccessTokenCreateInput ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerAccessTokenCreateWithMultipassRequiredArguments =
    { multipassToken : String }


{-| Creates a customer access token using a multipass token instead of email and password.
A customer record is created if customer does not exist. If a customer record already
exists but the record is disabled, then it's enabled.

  - multipassToken - A valid multipass token to be authenticated.

-}
customerAccessTokenCreateWithMultipass :
    CustomerAccessTokenCreateWithMultipassRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerAccessTokenCreateWithMultipassPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerAccessTokenCreateWithMultipass requiredArgs____ object____ =
    Object.selectionForCompositeField "customerAccessTokenCreateWithMultipass" [ Argument.required "multipassToken" requiredArgs____.multipassToken Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerAccessTokenDeleteRequiredArguments =
    { customerAccessToken : String }


{-| Permanently destroys a customer access token.

  - customerAccessToken - The access token used to identify the customer.

-}
customerAccessTokenDelete :
    CustomerAccessTokenDeleteRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerAccessTokenDeletePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerAccessTokenDelete requiredArgs____ object____ =
    Object.selectionForCompositeField "customerAccessTokenDelete" [ Argument.required "customerAccessToken" requiredArgs____.customerAccessToken Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerAccessTokenRenewRequiredArguments =
    { customerAccessToken : String }


{-| Renews a customer access token.

Access token renewal must happen _before_ a token expires.
If a token has already expired, a new one should be created instead via `customerAccessTokenCreate`.

  - customerAccessToken - The access token used to identify the customer.

-}
customerAccessTokenRenew :
    CustomerAccessTokenRenewRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerAccessTokenRenewPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerAccessTokenRenew requiredArgs____ object____ =
    Object.selectionForCompositeField "customerAccessTokenRenew" [ Argument.required "customerAccessToken" requiredArgs____.customerAccessToken Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerActivateRequiredArguments =
    { id : Shopify.ScalarCodecs.Id
    , input : Shopify.InputObject.CustomerActivateInput
    }


{-| Activates a customer.

  - id - Specifies the customer to activate.
  - input - The fields used to activate a customer.

-}
customerActivate :
    CustomerActivateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerActivatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerActivate requiredArgs____ object____ =
    Object.selectionForCompositeField "customerActivate" [ Argument.required "id" requiredArgs____.id (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "input" requiredArgs____.input Shopify.InputObject.encodeCustomerActivateInput ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerActivateByUrlRequiredArguments =
    { activationUrl : Shopify.ScalarCodecs.Url
    , password : String
    }


{-| Activates a customer with the activation url received from `customerCreate`.

  - activationUrl - The customer activation URL.
  - password - A new password set during activation.

-}
customerActivateByUrl :
    CustomerActivateByUrlRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerActivateByUrlPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerActivateByUrl requiredArgs____ object____ =
    Object.selectionForCompositeField "customerActivateByUrl" [ Argument.required "activationUrl" requiredArgs____.activationUrl (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecUrl), Argument.required "password" requiredArgs____.password Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerAddressCreateRequiredArguments =
    { customerAccessToken : String
    , address : Shopify.InputObject.MailingAddressInput
    }


{-| Creates a new address for a customer.

  - customerAccessToken - The access token used to identify the customer.
  - address - The customer mailing address to create.

-}
customerAddressCreate :
    CustomerAddressCreateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerAddressCreatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerAddressCreate requiredArgs____ object____ =
    Object.selectionForCompositeField "customerAddressCreate" [ Argument.required "customerAccessToken" requiredArgs____.customerAccessToken Encode.string, Argument.required "address" requiredArgs____.address Shopify.InputObject.encodeMailingAddressInput ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerAddressDeleteRequiredArguments =
    { id : Shopify.ScalarCodecs.Id
    , customerAccessToken : String
    }


{-| Permanently deletes the address of an existing customer.

  - id - Specifies the address to delete.
  - customerAccessToken - The access token used to identify the customer.

-}
customerAddressDelete :
    CustomerAddressDeleteRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerAddressDeletePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerAddressDelete requiredArgs____ object____ =
    Object.selectionForCompositeField "customerAddressDelete" [ Argument.required "id" requiredArgs____.id (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "customerAccessToken" requiredArgs____.customerAccessToken Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerAddressUpdateRequiredArguments =
    { customerAccessToken : String
    , id : Shopify.ScalarCodecs.Id
    , address : Shopify.InputObject.MailingAddressInput
    }


{-| Updates the address of an existing customer.

  - customerAccessToken - The access token used to identify the customer.
  - id - Specifies the customer address to update.
  - address - The customer’s mailing address.

-}
customerAddressUpdate :
    CustomerAddressUpdateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerAddressUpdatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerAddressUpdate requiredArgs____ object____ =
    Object.selectionForCompositeField "customerAddressUpdate" [ Argument.required "customerAccessToken" requiredArgs____.customerAccessToken Encode.string, Argument.required "id" requiredArgs____.id (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "address" requiredArgs____.address Shopify.InputObject.encodeMailingAddressInput ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerCreateRequiredArguments =
    { input : Shopify.InputObject.CustomerCreateInput }


{-| Creates a new customer.

  - input - The fields used to create a new customer.

-}
customerCreate :
    CustomerCreateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerCreatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerCreate requiredArgs____ object____ =
    Object.selectionForCompositeField "customerCreate" [ Argument.required "input" requiredArgs____.input Shopify.InputObject.encodeCustomerCreateInput ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerDefaultAddressUpdateRequiredArguments =
    { customerAccessToken : String
    , addressId : Shopify.ScalarCodecs.Id
    }


{-| Updates the default address of an existing customer.

  - customerAccessToken - The access token used to identify the customer.
  - addressId - ID of the address to set as the new default for the customer.

-}
customerDefaultAddressUpdate :
    CustomerDefaultAddressUpdateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerDefaultAddressUpdatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerDefaultAddressUpdate requiredArgs____ object____ =
    Object.selectionForCompositeField "customerDefaultAddressUpdate" [ Argument.required "customerAccessToken" requiredArgs____.customerAccessToken Encode.string, Argument.required "addressId" requiredArgs____.addressId (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerRecoverRequiredArguments =
    { email : String }


{-| Sends a reset password email to the customer, as the first step in the reset password process.

  - email - The email address of the customer to recover.

-}
customerRecover :
    CustomerRecoverRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerRecoverPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerRecover requiredArgs____ object____ =
    Object.selectionForCompositeField "customerRecover" [ Argument.required "email" requiredArgs____.email Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerResetRequiredArguments =
    { id : Shopify.ScalarCodecs.Id
    , input : Shopify.InputObject.CustomerResetInput
    }


{-| Resets a customer’s password with a token received from `CustomerRecover`.

  - id - Specifies the customer to reset.
  - input - The fields used to reset a customer’s password.

-}
customerReset :
    CustomerResetRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerResetPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerReset requiredArgs____ object____ =
    Object.selectionForCompositeField "customerReset" [ Argument.required "id" requiredArgs____.id (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId), Argument.required "input" requiredArgs____.input Shopify.InputObject.encodeCustomerResetInput ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerResetByUrlRequiredArguments =
    { resetUrl : Shopify.ScalarCodecs.Url
    , password : String
    }


{-| Resets a customer’s password with the reset password url received from `CustomerRecover`.

  - resetUrl - The customer's reset password url.
  - password - New password that will be set as part of the reset password process.

-}
customerResetByUrl :
    CustomerResetByUrlRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerResetByUrlPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerResetByUrl requiredArgs____ object____ =
    Object.selectionForCompositeField "customerResetByUrl" [ Argument.required "resetUrl" requiredArgs____.resetUrl (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecUrl), Argument.required "password" requiredArgs____.password Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias CustomerUpdateRequiredArguments =
    { customerAccessToken : String
    , customer : Shopify.InputObject.CustomerUpdateInput
    }


{-| Updates an existing customer.

  - customerAccessToken - The access token used to identify the customer.
  - customer - The customer object input.

-}
customerUpdate :
    CustomerUpdateRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.CustomerUpdatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
customerUpdate requiredArgs____ object____ =
    Object.selectionForCompositeField "customerUpdate" [ Argument.required "customerAccessToken" requiredArgs____.customerAccessToken Encode.string, Argument.required "customer" requiredArgs____.customer Shopify.InputObject.encodeCustomerUpdateInput ] object____ (Basics.identity >> Decode.nullable)
