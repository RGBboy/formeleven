-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Object.Blog exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Shopify.Enum.ArticleSortKeys
import Shopify.InputObject
import Shopify.Interface
import Shopify.Object
import Shopify.Scalar
import Shopify.ScalarCodecs
import Shopify.Union


type alias ArticleByHandleRequiredArguments =
    { handle : String }


{-| Find an article by its handle.

  - handle - The handle of the article.

-}
articleByHandle :
    ArticleByHandleRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.Article
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Blog
articleByHandle requiredArgs____ object____ =
    Object.selectionForCompositeField "articleByHandle" [ Argument.required "handle" requiredArgs____.handle Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias ArticlesOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    , sortKey : OptionalArgument Shopify.Enum.ArticleSortKeys.ArticleSortKeys
    , query : OptionalArgument String
    }


{-| List of the blog's articles.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.
  - sortKey - Sort the underlying list by the given key.
  - query - Supported filter parameters:
  - `author`
  - `blog_title`
  - `created_at`
  - `tag`
  - `tag_not`
  - `updated_at`

See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
for more information about using filters.

-}
articles :
    (ArticlesOptionalArguments -> ArticlesOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.ArticleConnection
    -> SelectionSet decodesTo Shopify.Object.Blog
articles fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent, sortKey = Absent, query = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool, Argument.optional "sortKey" filledInOptionals____.sortKey (Encode.enum Shopify.Enum.ArticleSortKeys.toString), Argument.optional "query" filledInOptionals____.query Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "articles" optionalArgs____ object____ Basics.identity


{-| The authors who have contributed to the blog.
-}
authors :
    SelectionSet decodesTo Shopify.Object.ArticleAuthor
    -> SelectionSet (List decodesTo) Shopify.Object.Blog
authors object____ =
    Object.selectionForCompositeField "authors" [] object____ (Basics.identity >> Decode.list)


{-| A human-friendly unique string for the Blog automatically generated from its title.
-}
handle : SelectionSet String Shopify.Object.Blog
handle =
    Object.selectionForField "String" "handle" [] Decode.string


{-| A globally-unique identifier.
-}
id : SelectionSet Shopify.ScalarCodecs.Id Shopify.Object.Blog
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias MetafieldRequiredArguments =
    { namespace : String
    , key : String
    }


{-| Returns a metafield found by namespace and key.

  - namespace - A container for a set of metafields.
  - key - The identifier for the metafield.

-}
metafield :
    MetafieldRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.Metafield
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Blog
metafield requiredArgs____ object____ =
    Object.selectionForCompositeField "metafield" [ Argument.required "namespace" requiredArgs____.namespace Encode.string, Argument.required "key" requiredArgs____.key Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias MetafieldsRequiredArguments =
    { identifiers : List Shopify.InputObject.HasMetafieldsIdentifier }


{-| The metafields associated with the resource matching the supplied list of namespaces and keys.

  - identifiers - The list of metafields to retrieve by namespace and key.

-}
metafields :
    MetafieldsRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.Metafield
    -> SelectionSet (List (Maybe decodesTo)) Shopify.Object.Blog
metafields requiredArgs____ object____ =
    Object.selectionForCompositeField "metafields" [ Argument.required "identifiers" requiredArgs____.identifiers (Shopify.InputObject.encodeHasMetafieldsIdentifier |> Encode.list) ] object____ (Basics.identity >> Decode.nullable >> Decode.list)


{-| The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
-}
onlineStoreUrl : SelectionSet (Maybe Shopify.ScalarCodecs.Url) Shopify.Object.Blog
onlineStoreUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Url)" "onlineStoreUrl" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecUrl |> .decoder |> Decode.nullable)


{-| The blog's SEO information.
-}
seo :
    SelectionSet decodesTo Shopify.Object.Seo
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Blog
seo object____ =
    Object.selectionForCompositeField "seo" [] object____ (Basics.identity >> Decode.nullable)


{-| The blogsâ€™s title.
-}
title : SelectionSet String Shopify.Object.Blog
title =
    Object.selectionForField "String" "title" [] Decode.string
