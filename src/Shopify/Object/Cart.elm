-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Object.Cart exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Shopify.InputObject
import Shopify.Interface
import Shopify.Object
import Shopify.Scalar
import Shopify.ScalarCodecs
import Shopify.Union


type alias AttributeRequiredArguments =
    { key : String }


{-| An attribute associated with the cart.

  - key - The key of the attribute.

-}
attribute :
    AttributeRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.Attribute
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Cart
attribute requiredArgs____ object____ =
    Object.selectionForCompositeField "attribute" [ Argument.required "key" requiredArgs____.key Encode.string ] object____ (Basics.identity >> Decode.nullable)


{-| The attributes associated with the cart. Attributes are represented as key-value pairs.
-}
attributes :
    SelectionSet decodesTo Shopify.Object.Attribute
    -> SelectionSet (List decodesTo) Shopify.Object.Cart
attributes object____ =
    Object.selectionForCompositeField "attributes" [] object____ (Basics.identity >> Decode.list)


{-| Information about the buyer that is interacting with the cart.
-}
buyerIdentity :
    SelectionSet decodesTo Shopify.Object.CartBuyerIdentity
    -> SelectionSet decodesTo Shopify.Object.Cart
buyerIdentity object____ =
    Object.selectionForCompositeField "buyerIdentity" [] object____ Basics.identity


{-| The URL of the checkout for the cart.
-}
checkoutUrl : SelectionSet Shopify.ScalarCodecs.Url Shopify.Object.Cart
checkoutUrl =
    Object.selectionForField "ScalarCodecs.Url" "checkoutUrl" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecUrl |> .decoder)


{-| The estimated costs that the buyer will pay at checkout. The costs are subject to change and changes will be reflected at checkout. The `cost` field uses the `buyerIdentity` field to determine [international pricing](https://shopify.dev/api/examples/international-pricing#create-a-cart).
-}
cost :
    SelectionSet decodesTo Shopify.Object.CartCost
    -> SelectionSet decodesTo Shopify.Object.Cart
cost object____ =
    Object.selectionForCompositeField "cost" [] object____ Basics.identity


{-| The date and time when the cart was created.
-}
createdAt : SelectionSet Shopify.ScalarCodecs.DateTime Shopify.Object.Cart
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias DeliveryGroupsOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    }


{-| The delivery groups available for the cart, based on the default address of the logged-in customer.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.

-}
deliveryGroups :
    (DeliveryGroupsOptionalArguments -> DeliveryGroupsOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.CartDeliveryGroupConnection
    -> SelectionSet decodesTo Shopify.Object.Cart
deliveryGroups fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "deliveryGroups" optionalArgs____ object____ Basics.identity


{-| The discounts that have been applied to the entire cart.
-}
discountAllocations :
    SelectionSet decodesTo Shopify.Interface.CartDiscountAllocation
    -> SelectionSet (List decodesTo) Shopify.Object.Cart
discountAllocations object____ =
    Object.selectionForCompositeField "discountAllocations" [] object____ (Basics.identity >> Decode.list)


{-| The case-insensitive discount codes that the customer added at checkout.
-}
discountCodes :
    SelectionSet decodesTo Shopify.Object.CartDiscountCode
    -> SelectionSet (List decodesTo) Shopify.Object.Cart
discountCodes object____ =
    Object.selectionForCompositeField "discountCodes" [] object____ (Basics.identity >> Decode.list)


{-| The estimated costs that the buyer will pay at checkout. The estimated costs are subject to change and changes will be reflected at checkout. The `estimatedCost` field uses the `buyerIdentity` field to determine [international pricing](https://shopify.dev/api/examples/international-pricing#create-a-cart).
-}
estimatedCost :
    SelectionSet decodesTo Shopify.Object.CartEstimatedCost
    -> SelectionSet decodesTo Shopify.Object.Cart
estimatedCost object____ =
    Object.selectionForCompositeField "estimatedCost" [] object____ Basics.identity


{-| A globally-unique identifier.
-}
id : SelectionSet Shopify.ScalarCodecs.Id Shopify.Object.Cart
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias LinesOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    }


{-| A list of lines containing information about the items the customer intends to purchase.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.

-}
lines :
    (LinesOptionalArguments -> LinesOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.CartLineConnection
    -> SelectionSet decodesTo Shopify.Object.Cart
lines fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "lines" optionalArgs____ object____ Basics.identity


{-| A note that is associated with the cart. For example, the note can be a personalized message to the buyer.
-}
note : SelectionSet (Maybe String) Shopify.Object.Cart
note =
    Object.selectionForField "(Maybe String)" "note" [] (Decode.string |> Decode.nullable)


{-| The total number of items in the cart.
-}
totalQuantity : SelectionSet Int Shopify.Object.Cart
totalQuantity =
    Object.selectionForField "Int" "totalQuantity" [] Decode.int


{-| The date and time when the cart was updated.
-}
updatedAt : SelectionSet Shopify.ScalarCodecs.DateTime Shopify.Object.Cart
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)
