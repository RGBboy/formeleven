-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Object.SellingPlanGroup exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Shopify.InputObject
import Shopify.Interface
import Shopify.Object
import Shopify.Scalar
import Shopify.ScalarCodecs
import Shopify.Union


{-| A display friendly name for the app that created the selling plan group.
-}
appName : SelectionSet (Maybe String) Shopify.Object.SellingPlanGroup
appName =
    Object.selectionForField "(Maybe String)" "appName" [] (Decode.string |> Decode.nullable)


{-| The name of the selling plan group.
-}
name : SelectionSet String Shopify.Object.SellingPlanGroup
name =
    Object.selectionForField "String" "name" [] Decode.string


{-| Represents the selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product.
-}
options :
    SelectionSet decodesTo Shopify.Object.SellingPlanGroupOption
    -> SelectionSet (List decodesTo) Shopify.Object.SellingPlanGroup
options object____ =
    Object.selectionForCompositeField "options" [] object____ (Basics.identity >> Decode.list)


type alias SellingPlansOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    }


{-| A list of selling plans in a selling plan group. A selling plan is a representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.

-}
sellingPlans :
    (SellingPlansOptionalArguments -> SellingPlansOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.SellingPlanConnection
    -> SelectionSet decodesTo Shopify.Object.SellingPlanGroup
sellingPlans fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sellingPlans" optionalArgs____ object____ Basics.identity
