-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Object.Checkout exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Shopify.Enum.CurrencyCode
import Shopify.InputObject
import Shopify.Interface
import Shopify.Object
import Shopify.Scalar
import Shopify.ScalarCodecs
import Shopify.Union


{-| The gift cards used on the checkout.
-}
appliedGiftCards :
    SelectionSet decodesTo Shopify.Object.AppliedGiftCard
    -> SelectionSet (List decodesTo) Shopify.Object.Checkout
appliedGiftCards object____ =
    Object.selectionForCompositeField "appliedGiftCards" [] object____ (Basics.identity >> Decode.list)


{-| The available shipping rates for this Checkout.
Should only be used when checkout `requiresShipping` is `true` and
the shipping address is valid.
-}
availableShippingRates :
    SelectionSet decodesTo Shopify.Object.AvailableShippingRates
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Checkout
availableShippingRates object____ =
    Object.selectionForCompositeField "availableShippingRates" [] object____ (Basics.identity >> Decode.nullable)


{-| The identity of the customer associated with the checkout.
-}
buyerIdentity :
    SelectionSet decodesTo Shopify.Object.CheckoutBuyerIdentity
    -> SelectionSet decodesTo Shopify.Object.Checkout
buyerIdentity object____ =
    Object.selectionForCompositeField "buyerIdentity" [] object____ Basics.identity


{-| The date and time when the checkout was completed.
-}
completedAt : SelectionSet (Maybe Shopify.ScalarCodecs.DateTime) Shopify.Object.Checkout
completedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "completedAt" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| The date and time when the checkout was created.
-}
createdAt : SelectionSet Shopify.ScalarCodecs.DateTime Shopify.Object.Checkout
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The currency code for the checkout.
-}
currencyCode : SelectionSet Shopify.Enum.CurrencyCode.CurrencyCode Shopify.Object.Checkout
currencyCode =
    Object.selectionForField "Enum.CurrencyCode.CurrencyCode" "currencyCode" [] Shopify.Enum.CurrencyCode.decoder


{-| A list of extra information that is added to the checkout.
-}
customAttributes :
    SelectionSet decodesTo Shopify.Object.Attribute
    -> SelectionSet (List decodesTo) Shopify.Object.Checkout
customAttributes object____ =
    Object.selectionForCompositeField "customAttributes" [] object____ (Basics.identity >> Decode.list)


type alias DiscountApplicationsOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    }


{-| Discounts that have been applied on the checkout.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.

-}
discountApplications :
    (DiscountApplicationsOptionalArguments -> DiscountApplicationsOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.DiscountApplicationConnection
    -> SelectionSet decodesTo Shopify.Object.Checkout
discountApplications fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "discountApplications" optionalArgs____ object____ Basics.identity


{-| The email attached to this checkout.
-}
email : SelectionSet (Maybe String) Shopify.Object.Checkout
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


{-| A globally-unique identifier.
-}
id : SelectionSet Shopify.ScalarCodecs.Id Shopify.Object.Checkout
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias LineItemsOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    }


{-| A list of line item objects, each one containing information about an item in the checkout.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.

-}
lineItems :
    (LineItemsOptionalArguments -> LineItemsOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.CheckoutLineItemConnection
    -> SelectionSet decodesTo Shopify.Object.Checkout
lineItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "lineItems" optionalArgs____ object____ Basics.identity


{-| The sum of all the prices of all the items in the checkout. Duties, taxes, shipping and discounts excluded.
-}
lineItemsSubtotalPrice :
    SelectionSet decodesTo Shopify.Object.MoneyV2
    -> SelectionSet decodesTo Shopify.Object.Checkout
lineItemsSubtotalPrice object____ =
    Object.selectionForCompositeField "lineItemsSubtotalPrice" [] object____ Basics.identity


{-| The note associated with the checkout.
-}
note : SelectionSet (Maybe String) Shopify.Object.Checkout
note =
    Object.selectionForField "(Maybe String)" "note" [] (Decode.string |> Decode.nullable)


{-| The resulting order from a paid checkout.
-}
order :
    SelectionSet decodesTo Shopify.Object.Order
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Checkout
order object____ =
    Object.selectionForCompositeField "order" [] object____ (Basics.identity >> Decode.nullable)


{-| The Order Status Page for this Checkout, null when checkout is not completed.
-}
orderStatusUrl : SelectionSet (Maybe Shopify.ScalarCodecs.Url) Shopify.Object.Checkout
orderStatusUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Url)" "orderStatusUrl" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecUrl |> .decoder |> Decode.nullable)


{-| The amount left to be paid. This is equal to the cost of the line items, taxes and shipping minus discounts and gift cards.
-}
paymentDue : SelectionSet Shopify.ScalarCodecs.Money Shopify.Object.Checkout
paymentDue =
    Object.selectionForField "ScalarCodecs.Money" "paymentDue" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecMoney |> .decoder)


{-| The amount left to be paid. This is equal to the cost of the line items, duties, taxes and shipping minus discounts and gift cards.
-}
paymentDueV2 :
    SelectionSet decodesTo Shopify.Object.MoneyV2
    -> SelectionSet decodesTo Shopify.Object.Checkout
paymentDueV2 object____ =
    Object.selectionForCompositeField "paymentDueV2" [] object____ Basics.identity


{-| Whether or not the Checkout is ready and can be completed. Checkouts may
have asynchronous operations that can take time to finish. If you want
to complete a checkout or ensure all the fields are populated and up to
date, polling is required until the value is true.
-}
ready : SelectionSet Bool Shopify.Object.Checkout
ready =
    Object.selectionForField "Bool" "ready" [] Decode.bool


{-| States whether or not the fulfillment requires shipping.
-}
requiresShipping : SelectionSet Bool Shopify.Object.Checkout
requiresShipping =
    Object.selectionForField "Bool" "requiresShipping" [] Decode.bool


{-| The shipping address to where the line items will be shipped.
-}
shippingAddress :
    SelectionSet decodesTo Shopify.Object.MailingAddress
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Checkout
shippingAddress object____ =
    Object.selectionForCompositeField "shippingAddress" [] object____ (Basics.identity >> Decode.nullable)


{-| The discounts that have been allocated onto the shipping line by discount applications.
-}
shippingDiscountAllocations :
    SelectionSet decodesTo Shopify.Object.DiscountAllocation
    -> SelectionSet (List decodesTo) Shopify.Object.Checkout
shippingDiscountAllocations object____ =
    Object.selectionForCompositeField "shippingDiscountAllocations" [] object____ (Basics.identity >> Decode.list)


{-| Once a shipping rate is selected by the customer it is transitioned to a `shipping_line` object.
-}
shippingLine :
    SelectionSet decodesTo Shopify.Object.ShippingRate
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Checkout
shippingLine object____ =
    Object.selectionForCompositeField "shippingLine" [] object____ (Basics.identity >> Decode.nullable)


{-| Price of the checkout before shipping and taxes.
-}
subtotalPrice : SelectionSet Shopify.ScalarCodecs.Money Shopify.Object.Checkout
subtotalPrice =
    Object.selectionForField "ScalarCodecs.Money" "subtotalPrice" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecMoney |> .decoder)


{-| Price of the checkout before duties, shipping and taxes.
-}
subtotalPriceV2 :
    SelectionSet decodesTo Shopify.Object.MoneyV2
    -> SelectionSet decodesTo Shopify.Object.Checkout
subtotalPriceV2 object____ =
    Object.selectionForCompositeField "subtotalPriceV2" [] object____ Basics.identity


{-| Whether the checkout is tax exempt.
-}
taxExempt : SelectionSet Bool Shopify.Object.Checkout
taxExempt =
    Object.selectionForField "Bool" "taxExempt" [] Decode.bool


{-| Whether taxes are included in the line item and shipping line prices.
-}
taxesIncluded : SelectionSet Bool Shopify.Object.Checkout
taxesIncluded =
    Object.selectionForField "Bool" "taxesIncluded" [] Decode.bool


{-| The sum of all the duties applied to the line items in the checkout.
-}
totalDuties :
    SelectionSet decodesTo Shopify.Object.MoneyV2
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Checkout
totalDuties object____ =
    Object.selectionForCompositeField "totalDuties" [] object____ (Basics.identity >> Decode.nullable)


{-| The sum of all the prices of all the items in the checkout, taxes and discounts included.
-}
totalPrice : SelectionSet Shopify.ScalarCodecs.Money Shopify.Object.Checkout
totalPrice =
    Object.selectionForField "ScalarCodecs.Money" "totalPrice" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecMoney |> .decoder)


{-| The sum of all the prices of all the items in the checkout, duties, taxes and discounts included.
-}
totalPriceV2 :
    SelectionSet decodesTo Shopify.Object.MoneyV2
    -> SelectionSet decodesTo Shopify.Object.Checkout
totalPriceV2 object____ =
    Object.selectionForCompositeField "totalPriceV2" [] object____ Basics.identity


{-| The sum of all the taxes applied to the line items and shipping lines in the checkout.
-}
totalTax : SelectionSet Shopify.ScalarCodecs.Money Shopify.Object.Checkout
totalTax =
    Object.selectionForField "ScalarCodecs.Money" "totalTax" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecMoney |> .decoder)


{-| The sum of all the taxes applied to the line items and shipping lines in the checkout.
-}
totalTaxV2 :
    SelectionSet decodesTo Shopify.Object.MoneyV2
    -> SelectionSet decodesTo Shopify.Object.Checkout
totalTaxV2 object____ =
    Object.selectionForCompositeField "totalTaxV2" [] object____ Basics.identity


{-| The date and time when the checkout was last updated.
-}
updatedAt : SelectionSet Shopify.ScalarCodecs.DateTime Shopify.Object.Checkout
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The url pointing to the checkout accessible from the web.
-}
webUrl : SelectionSet Shopify.ScalarCodecs.Url Shopify.Object.Checkout
webUrl =
    Object.selectionForField "ScalarCodecs.Url" "webUrl" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecUrl |> .decoder)
