-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Object.Product exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Shopify.Enum.ProductImageSortKeys
import Shopify.Enum.ProductMediaSortKeys
import Shopify.Enum.ProductVariantSortKeys
import Shopify.InputObject
import Shopify.Interface
import Shopify.Object
import Shopify.Scalar
import Shopify.ScalarCodecs
import Shopify.Union


{-| Indicates if at least one product variant is available for sale.
-}
availableForSale : SelectionSet Bool Shopify.Object.Product
availableForSale =
    Object.selectionForField "Bool" "availableForSale" [] Decode.bool


type alias CollectionsOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    }


{-| List of collections a product belongs to.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.

-}
collections :
    (CollectionsOptionalArguments -> CollectionsOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.CollectionConnection
    -> SelectionSet decodesTo Shopify.Object.Product
collections fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "collections" optionalArgs____ object____ Basics.identity


{-| The compare at price of the product across all variants.
-}
compareAtPriceRange :
    SelectionSet decodesTo Shopify.Object.ProductPriceRange
    -> SelectionSet decodesTo Shopify.Object.Product
compareAtPriceRange object____ =
    Object.selectionForCompositeField "compareAtPriceRange" [] object____ Basics.identity


{-| The date and time when the product was created.
-}
createdAt : SelectionSet Shopify.ScalarCodecs.DateTime Shopify.Object.Product
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias DescriptionOptionalArguments =
    { truncateAt : OptionalArgument Int }


{-| Stripped description of the product, single line with HTML tags removed.

  - truncateAt - Truncates string after the given length.

-}
description :
    (DescriptionOptionalArguments -> DescriptionOptionalArguments)
    -> SelectionSet String Shopify.Object.Product
description fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { truncateAt = Absent }

        optionalArgs____ =
            [ Argument.optional "truncateAt" filledInOptionals____.truncateAt Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "String" "description" optionalArgs____ Decode.string


{-| The description of the product, complete with HTML formatting.
-}
descriptionHtml : SelectionSet Shopify.ScalarCodecs.Html Shopify.Object.Product
descriptionHtml =
    Object.selectionForField "ScalarCodecs.Html" "descriptionHtml" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| The featured image for the product.

This field is functionally equivalent to `images(first: 1)`.

-}
featuredImage :
    SelectionSet decodesTo Shopify.Object.Image
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Product
featuredImage object____ =
    Object.selectionForCompositeField "featuredImage" [] object____ (Basics.identity >> Decode.nullable)


{-| A human-friendly unique string for the Product automatically generated from its title.
They are used by the Liquid templating language to refer to objects.
-}
handle : SelectionSet String Shopify.Object.Product
handle =
    Object.selectionForField "String" "handle" [] Decode.string


{-| A globally-unique identifier.
-}
id : SelectionSet Shopify.ScalarCodecs.Id Shopify.Object.Product
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias ImagesOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    , sortKey : OptionalArgument Shopify.Enum.ProductImageSortKeys.ProductImageSortKeys
    }


{-| List of images associated with the product.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.
  - sortKey - Sort the underlying list by the given key.

-}
images :
    (ImagesOptionalArguments -> ImagesOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.ImageConnection
    -> SelectionSet decodesTo Shopify.Object.Product
images fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent, sortKey = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool, Argument.optional "sortKey" filledInOptionals____.sortKey (Encode.enum Shopify.Enum.ProductImageSortKeys.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "images" optionalArgs____ object____ Basics.identity


type alias MediaOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    , sortKey : OptionalArgument Shopify.Enum.ProductMediaSortKeys.ProductMediaSortKeys
    }


{-| The media associated with the product.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.
  - sortKey - Sort the underlying list by the given key.

-}
media :
    (MediaOptionalArguments -> MediaOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.MediaConnection
    -> SelectionSet decodesTo Shopify.Object.Product
media fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent, sortKey = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool, Argument.optional "sortKey" filledInOptionals____.sortKey (Encode.enum Shopify.Enum.ProductMediaSortKeys.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "media" optionalArgs____ object____ Basics.identity


type alias MetafieldRequiredArguments =
    { namespace : String
    , key : String
    }


{-| Returns a metafield found by namespace and key.

  - namespace - A container for a set of metafields.
  - key - The identifier for the metafield.

-}
metafield :
    MetafieldRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.Metafield
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Product
metafield requiredArgs____ object____ =
    Object.selectionForCompositeField "metafield" [ Argument.required "namespace" requiredArgs____.namespace Encode.string, Argument.required "key" requiredArgs____.key Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias MetafieldsRequiredArguments =
    { identifiers : List Shopify.InputObject.HasMetafieldsIdentifier }


{-| The metafields associated with the resource matching the supplied list of namespaces and keys.

  - identifiers - The list of metafields to retrieve by namespace and key.

-}
metafields :
    MetafieldsRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.Metafield
    -> SelectionSet (List (Maybe decodesTo)) Shopify.Object.Product
metafields requiredArgs____ object____ =
    Object.selectionForCompositeField "metafields" [ Argument.required "identifiers" requiredArgs____.identifiers (Shopify.InputObject.encodeHasMetafieldsIdentifier |> Encode.list) ] object____ (Basics.identity >> Decode.nullable >> Decode.list)


{-| The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
-}
onlineStoreUrl : SelectionSet (Maybe Shopify.ScalarCodecs.Url) Shopify.Object.Product
onlineStoreUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Url)" "onlineStoreUrl" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecUrl |> .decoder |> Decode.nullable)


type alias OptionsOptionalArguments =
    { first : OptionalArgument Int }


{-| List of product options.

  - first - Truncate the array result to this size.

-}
options :
    (OptionsOptionalArguments -> OptionsOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.ProductOption
    -> SelectionSet (List decodesTo) Shopify.Object.Product
options fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "options" optionalArgs____ object____ (Basics.identity >> Decode.list)


{-| The price range.
-}
priceRange :
    SelectionSet decodesTo Shopify.Object.ProductPriceRange
    -> SelectionSet decodesTo Shopify.Object.Product
priceRange object____ =
    Object.selectionForCompositeField "priceRange" [] object____ Basics.identity


{-| A categorization that a product can be tagged with, commonly used for filtering and searching.
-}
productType : SelectionSet String Shopify.Object.Product
productType =
    Object.selectionForField "String" "productType" [] Decode.string


{-| The date and time when the product was published to the channel.
-}
publishedAt : SelectionSet Shopify.ScalarCodecs.DateTime Shopify.Object.Product
publishedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "publishedAt" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Whether the product can only be purchased with a selling plan.
-}
requiresSellingPlan : SelectionSet Bool Shopify.Object.Product
requiresSellingPlan =
    Object.selectionForField "Bool" "requiresSellingPlan" [] Decode.bool


type alias SellingPlanGroupsOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    }


{-| A list of a product's available selling plan groups. A selling plan group represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.

-}
sellingPlanGroups :
    (SellingPlanGroupsOptionalArguments -> SellingPlanGroupsOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.SellingPlanGroupConnection
    -> SelectionSet decodesTo Shopify.Object.Product
sellingPlanGroups fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sellingPlanGroups" optionalArgs____ object____ Basics.identity


{-| The product's SEO information.
-}
seo :
    SelectionSet decodesTo Shopify.Object.Seo
    -> SelectionSet decodesTo Shopify.Object.Product
seo object____ =
    Object.selectionForCompositeField "seo" [] object____ Basics.identity


{-| A comma separated list of tags that have been added to the product.
Additional access scope required for private apps: unauthenticated\_read\_product\_tags.
-}
tags : SelectionSet (List String) Shopify.Object.Product
tags =
    Object.selectionForField "(List String)" "tags" [] (Decode.string |> Decode.list)


{-| The product’s title.
-}
title : SelectionSet String Shopify.Object.Product
title =
    Object.selectionForField "String" "title" [] Decode.string


{-| The total quantity of inventory in stock for this Product.
-}
totalInventory : SelectionSet (Maybe Int) Shopify.Object.Product
totalInventory =
    Object.selectionForField "(Maybe Int)" "totalInventory" [] (Decode.int |> Decode.nullable)


{-| The date and time when the product was last modified.
A product's `updatedAt` value can change for different reasons. For example, if an order
is placed for a product that has inventory tracking set up, then the inventory adjustment
is counted as an update.
-}
updatedAt : SelectionSet Shopify.ScalarCodecs.DateTime Shopify.Object.Product
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias VariantBySelectedOptionsRequiredArguments =
    { selectedOptions : List Shopify.InputObject.SelectedOptionInput }


{-| Find a product’s variant based on its selected options.
This is useful for converting a user’s selection of product options into a single matching variant.
If there is not a variant for the selected options, `null` will be returned.

  - selectedOptions - The input fields used for a selected option.

-}
variantBySelectedOptions :
    VariantBySelectedOptionsRequiredArguments
    -> SelectionSet decodesTo Shopify.Object.ProductVariant
    -> SelectionSet (Maybe decodesTo) Shopify.Object.Product
variantBySelectedOptions requiredArgs____ object____ =
    Object.selectionForCompositeField "variantBySelectedOptions" [ Argument.required "selectedOptions" requiredArgs____.selectedOptions (Shopify.InputObject.encodeSelectedOptionInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias VariantsOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    , reverse : OptionalArgument Bool
    , sortKey : OptionalArgument Shopify.Enum.ProductVariantSortKeys.ProductVariantSortKeys
    }


{-| List of the product’s variants.

  - first - Returns up to the first `n` elements from the list.
  - after - Returns the elements that come after the specified cursor.
  - last - Returns up to the last `n` elements from the list.
  - before - Returns the elements that come before the specified cursor.
  - reverse - Reverse the order of the underlying list.
  - sortKey - Sort the underlying list by the given key.

-}
variants :
    (VariantsOptionalArguments -> VariantsOptionalArguments)
    -> SelectionSet decodesTo Shopify.Object.ProductVariantConnection
    -> SelectionSet decodesTo Shopify.Object.Product
variants fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, reverse = Absent, sortKey = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "reverse" filledInOptionals____.reverse Encode.bool, Argument.optional "sortKey" filledInOptionals____.sortKey (Encode.enum Shopify.Enum.ProductVariantSortKeys.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "variants" optionalArgs____ object____ Basics.identity


{-| The product’s vendor name.
-}
vendor : SelectionSet String Shopify.Object.Product
vendor =
    Object.selectionForField "String" "vendor" [] Decode.string
