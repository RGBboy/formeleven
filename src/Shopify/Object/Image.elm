-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Object.Image exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Shopify.Enum.CropRegion
import Shopify.Enum.ImageContentType
import Shopify.InputObject
import Shopify.Interface
import Shopify.Object
import Shopify.Scalar
import Shopify.ScalarCodecs
import Shopify.Union


{-| A word or phrase to share the nature or contents of an image.
-}
altText : SelectionSet (Maybe String) Shopify.Object.Image
altText =
    Object.selectionForField "(Maybe String)" "altText" [] (Decode.string |> Decode.nullable)


{-| The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
-}
height : SelectionSet (Maybe Int) Shopify.Object.Image
height =
    Object.selectionForField "(Maybe Int)" "height" [] (Decode.int |> Decode.nullable)


{-| A unique identifier for the image.
-}
id : SelectionSet (Maybe Shopify.ScalarCodecs.Id) Shopify.Object.Image
id =
    Object.selectionForField "(Maybe ScalarCodecs.Id)" "id" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


{-| The location of the original image as a URL.

If there are any existing transformations in the original source URL, they will remain and not be stripped.

-}
originalSrc : SelectionSet Shopify.ScalarCodecs.Url Shopify.Object.Image
originalSrc =
    Object.selectionForField "ScalarCodecs.Url" "originalSrc" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecUrl |> .decoder)


{-| The location of the image as a URL.
-}
src : SelectionSet Shopify.ScalarCodecs.Url Shopify.Object.Image
src =
    Object.selectionForField "ScalarCodecs.Url" "src" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecUrl |> .decoder)


type alias TransformedSrcOptionalArguments =
    { maxWidth : OptionalArgument Int
    , maxHeight : OptionalArgument Int
    , crop : OptionalArgument Shopify.Enum.CropRegion.CropRegion
    , scale : OptionalArgument Int
    , preferredContentType : OptionalArgument Shopify.Enum.ImageContentType.ImageContentType
    }


{-| The location of the transformed image as a URL.

All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
Otherwise any transformations which an image type does not support will be ignored.

  - maxWidth - Image width in pixels between 1 and 5760.
  - maxHeight - Image height in pixels between 1 and 5760.
  - crop - Crops the image according to the specified region.
  - scale - Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
  - preferredContentType - Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are supported).

-}
transformedSrc :
    (TransformedSrcOptionalArguments -> TransformedSrcOptionalArguments)
    -> SelectionSet Shopify.ScalarCodecs.Url Shopify.Object.Image
transformedSrc fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { maxWidth = Absent, maxHeight = Absent, crop = Absent, scale = Absent, preferredContentType = Absent }

        optionalArgs____ =
            [ Argument.optional "maxWidth" filledInOptionals____.maxWidth Encode.int, Argument.optional "maxHeight" filledInOptionals____.maxHeight Encode.int, Argument.optional "crop" filledInOptionals____.crop (Encode.enum Shopify.Enum.CropRegion.toString), Argument.optional "scale" filledInOptionals____.scale Encode.int, Argument.optional "preferredContentType" filledInOptionals____.preferredContentType (Encode.enum Shopify.Enum.ImageContentType.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "ScalarCodecs.Url" "transformedSrc" optionalArgs____ (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecUrl |> .decoder)


type alias UrlOptionalArguments =
    { transform : OptionalArgument Shopify.InputObject.ImageTransformInput }


{-| The location of the image as a URL.

If no transform options are specified, then the original image will be preserved including any pre-applied transforms.

All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.

If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).

  - transform - A set of options to transform the original image.

-}
url :
    (UrlOptionalArguments -> UrlOptionalArguments)
    -> SelectionSet Shopify.ScalarCodecs.Url Shopify.Object.Image
url fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { transform = Absent }

        optionalArgs____ =
            [ Argument.optional "transform" filledInOptionals____.transform Shopify.InputObject.encodeImageTransformInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "ScalarCodecs.Url" "url" optionalArgs____ (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecUrl |> .decoder)


{-| The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
-}
width : SelectionSet (Maybe Int) Shopify.Object.Image
width =
    Object.selectionForField "(Maybe Int)" "width" [] (Decode.int |> Decode.nullable)
