-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Enum.UnitPriceMeasurementMeasuredType exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The accepted types of unit of measurement.

  - Volume - Unit of measurements representing volumes.
  - Weight - Unit of measurements representing weights.
  - Length - Unit of measurements representing lengths.
  - Area - Unit of measurements representing areas.

-}
type UnitPriceMeasurementMeasuredType
    = Volume
    | Weight
    | Length
    | Area


list : List UnitPriceMeasurementMeasuredType
list =
    [ Volume, Weight, Length, Area ]


decoder : Decoder UnitPriceMeasurementMeasuredType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "VOLUME" ->
                        Decode.succeed Volume

                    "WEIGHT" ->
                        Decode.succeed Weight

                    "LENGTH" ->
                        Decode.succeed Length

                    "AREA" ->
                        Decode.succeed Area

                    _ ->
                        Decode.fail ("Invalid UnitPriceMeasurementMeasuredType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UnitPriceMeasurementMeasuredType -> String
toString enum____ =
    case enum____ of
        Volume ->
            "VOLUME"

        Weight ->
            "WEIGHT"

        Length ->
            "LENGTH"

        Area ->
            "AREA"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UnitPriceMeasurementMeasuredType
fromString enumString____ =
    case enumString____ of
        "VOLUME" ->
            Just Volume

        "WEIGHT" ->
            Just Weight

        "LENGTH" ->
            Just Length

        "AREA" ->
            Just Area

        _ ->
            Nothing
