-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Enum.CustomerErrorCode exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Possible error codes that can be returned by `CustomerUserError`.

  - Blank - The input value is blank.
  - Invalid - The input value is invalid.
  - Taken - The input value is already taken.
  - TooLong - The input value is too long.
  - TooShort - The input value is too short.
  - UnidentifiedCustomer - Unidentified customer.
  - CustomerDisabled - Customer is disabled.
  - PasswordStartsOrEndsWithWhitespace - Input password starts or ends with whitespace.
  - ContainsHtmlTags - Input contains HTML tags.
  - ContainsUrl - Input contains URL.
  - TokenInvalid - Invalid activation token.
  - AlreadyEnabled - Customer already enabled.
  - NotFound - Address does not exist.
  - BadDomain - Input email contains an invalid domain name.
  - InvalidMultipassRequest - Multipass token is not valid.

-}
type CustomerErrorCode
    = Blank
    | Invalid
    | Taken
    | TooLong
    | TooShort
    | UnidentifiedCustomer
    | CustomerDisabled
    | PasswordStartsOrEndsWithWhitespace
    | ContainsHtmlTags
    | ContainsUrl
    | TokenInvalid
    | AlreadyEnabled
    | NotFound
    | BadDomain
    | InvalidMultipassRequest


list : List CustomerErrorCode
list =
    [ Blank, Invalid, Taken, TooLong, TooShort, UnidentifiedCustomer, CustomerDisabled, PasswordStartsOrEndsWithWhitespace, ContainsHtmlTags, ContainsUrl, TokenInvalid, AlreadyEnabled, NotFound, BadDomain, InvalidMultipassRequest ]


decoder : Decoder CustomerErrorCode
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "BLANK" ->
                        Decode.succeed Blank

                    "INVALID" ->
                        Decode.succeed Invalid

                    "TAKEN" ->
                        Decode.succeed Taken

                    "TOO_LONG" ->
                        Decode.succeed TooLong

                    "TOO_SHORT" ->
                        Decode.succeed TooShort

                    "UNIDENTIFIED_CUSTOMER" ->
                        Decode.succeed UnidentifiedCustomer

                    "CUSTOMER_DISABLED" ->
                        Decode.succeed CustomerDisabled

                    "PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE" ->
                        Decode.succeed PasswordStartsOrEndsWithWhitespace

                    "CONTAINS_HTML_TAGS" ->
                        Decode.succeed ContainsHtmlTags

                    "CONTAINS_URL" ->
                        Decode.succeed ContainsUrl

                    "TOKEN_INVALID" ->
                        Decode.succeed TokenInvalid

                    "ALREADY_ENABLED" ->
                        Decode.succeed AlreadyEnabled

                    "NOT_FOUND" ->
                        Decode.succeed NotFound

                    "BAD_DOMAIN" ->
                        Decode.succeed BadDomain

                    "INVALID_MULTIPASS_REQUEST" ->
                        Decode.succeed InvalidMultipassRequest

                    _ ->
                        Decode.fail ("Invalid CustomerErrorCode type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : CustomerErrorCode -> String
toString enum____ =
    case enum____ of
        Blank ->
            "BLANK"

        Invalid ->
            "INVALID"

        Taken ->
            "TAKEN"

        TooLong ->
            "TOO_LONG"

        TooShort ->
            "TOO_SHORT"

        UnidentifiedCustomer ->
            "UNIDENTIFIED_CUSTOMER"

        CustomerDisabled ->
            "CUSTOMER_DISABLED"

        PasswordStartsOrEndsWithWhitespace ->
            "PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE"

        ContainsHtmlTags ->
            "CONTAINS_HTML_TAGS"

        ContainsUrl ->
            "CONTAINS_URL"

        TokenInvalid ->
            "TOKEN_INVALID"

        AlreadyEnabled ->
            "ALREADY_ENABLED"

        NotFound ->
            "NOT_FOUND"

        BadDomain ->
            "BAD_DOMAIN"

        InvalidMultipassRequest ->
            "INVALID_MULTIPASS_REQUEST"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CustomerErrorCode
fromString enumString____ =
    case enumString____ of
        "BLANK" ->
            Just Blank

        "INVALID" ->
            Just Invalid

        "TAKEN" ->
            Just Taken

        "TOO_LONG" ->
            Just TooLong

        "TOO_SHORT" ->
            Just TooShort

        "UNIDENTIFIED_CUSTOMER" ->
            Just UnidentifiedCustomer

        "CUSTOMER_DISABLED" ->
            Just CustomerDisabled

        "PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE" ->
            Just PasswordStartsOrEndsWithWhitespace

        "CONTAINS_HTML_TAGS" ->
            Just ContainsHtmlTags

        "CONTAINS_URL" ->
            Just ContainsUrl

        "TOKEN_INVALID" ->
            Just TokenInvalid

        "ALREADY_ENABLED" ->
            Just AlreadyEnabled

        "NOT_FOUND" ->
            Just NotFound

        "BAD_DOMAIN" ->
            Just BadDomain

        "INVALID_MULTIPASS_REQUEST" ->
            Just InvalidMultipassRequest

        _ ->
            Nothing
