-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Enum.TransactionKind exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The different kinds of order transactions.

  - Sale - An authorization and capture performed together in a single step.

  - Capture - A transfer of the money that was reserved during the authorization stage.

  - Authorization - An amount reserved against the cardholder's funding source.
    Money does not change hands until the authorization is captured.

  - EmvAuthorization - An authorization for a payment taken with an EMV credit card reader.

  - Change - Money returned to the customer when they have paid too much.

-}
type TransactionKind
    = Sale
    | Capture
    | Authorization
    | EmvAuthorization
    | Change


list : List TransactionKind
list =
    [ Sale, Capture, Authorization, EmvAuthorization, Change ]


decoder : Decoder TransactionKind
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "SALE" ->
                        Decode.succeed Sale

                    "CAPTURE" ->
                        Decode.succeed Capture

                    "AUTHORIZATION" ->
                        Decode.succeed Authorization

                    "EMV_AUTHORIZATION" ->
                        Decode.succeed EmvAuthorization

                    "CHANGE" ->
                        Decode.succeed Change

                    _ ->
                        Decode.fail ("Invalid TransactionKind type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : TransactionKind -> String
toString enum____ =
    case enum____ of
        Sale ->
            "SALE"

        Capture ->
            "CAPTURE"

        Authorization ->
            "AUTHORIZATION"

        EmvAuthorization ->
            "EMV_AUTHORIZATION"

        Change ->
            "CHANGE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe TransactionKind
fromString enumString____ =
    case enumString____ of
        "SALE" ->
            Just Sale

        "CAPTURE" ->
            Just Capture

        "AUTHORIZATION" ->
            Just Authorization

        "EMV_AUTHORIZATION" ->
            Just EmvAuthorization

        "CHANGE" ->
            Just Change

        _ ->
            Nothing
