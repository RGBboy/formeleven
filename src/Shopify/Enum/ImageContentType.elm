-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Enum.ImageContentType exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| List of supported image content types.

  - Png - A PNG image.
  - Jpg - A JPG image.
  - Webp - A WEBP image.

-}
type ImageContentType
    = Png
    | Jpg
    | Webp


list : List ImageContentType
list =
    [ Png, Jpg, Webp ]


decoder : Decoder ImageContentType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "PNG" ->
                        Decode.succeed Png

                    "JPG" ->
                        Decode.succeed Jpg

                    "WEBP" ->
                        Decode.succeed Webp

                    _ ->
                        Decode.fail ("Invalid ImageContentType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ImageContentType -> String
toString enum____ =
    case enum____ of
        Png ->
            "PNG"

        Jpg ->
            "JPG"

        Webp ->
            "WEBP"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ImageContentType
fromString enumString____ =
    case enumString____ of
        "PNG" ->
            Just Png

        "JPG" ->
            Just Jpg

        "WEBP" ->
            Just Webp

        _ ->
            Nothing
