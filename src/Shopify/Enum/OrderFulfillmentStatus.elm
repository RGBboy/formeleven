-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Enum.OrderFulfillmentStatus exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Represents the order's aggregated fulfillment status for display purposes.

  - Unfulfilled - Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
  - PartiallyFulfilled - Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
  - Fulfilled - Displayed as **Fulfilled**. All of the items in the order have been fulfilled.
  - Restocked - Displayed as **Restocked**. All of the items in the order have been restocked. Replaced by "UNFULFILLED" status.
  - PendingFulfillment - Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by "IN\_PROGRESS" status.
  - Open - Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
  - InProgress - Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service.
  - OnHold - Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
  - Scheduled - Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.

-}
type OrderFulfillmentStatus
    = Unfulfilled
    | PartiallyFulfilled
    | Fulfilled
    | Restocked
    | PendingFulfillment
    | Open
    | InProgress
    | OnHold
    | Scheduled


list : List OrderFulfillmentStatus
list =
    [ Unfulfilled, PartiallyFulfilled, Fulfilled, Restocked, PendingFulfillment, Open, InProgress, OnHold, Scheduled ]


decoder : Decoder OrderFulfillmentStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "UNFULFILLED" ->
                        Decode.succeed Unfulfilled

                    "PARTIALLY_FULFILLED" ->
                        Decode.succeed PartiallyFulfilled

                    "FULFILLED" ->
                        Decode.succeed Fulfilled

                    "RESTOCKED" ->
                        Decode.succeed Restocked

                    "PENDING_FULFILLMENT" ->
                        Decode.succeed PendingFulfillment

                    "OPEN" ->
                        Decode.succeed Open

                    "IN_PROGRESS" ->
                        Decode.succeed InProgress

                    "ON_HOLD" ->
                        Decode.succeed OnHold

                    "SCHEDULED" ->
                        Decode.succeed Scheduled

                    _ ->
                        Decode.fail ("Invalid OrderFulfillmentStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : OrderFulfillmentStatus -> String
toString enum____ =
    case enum____ of
        Unfulfilled ->
            "UNFULFILLED"

        PartiallyFulfilled ->
            "PARTIALLY_FULFILLED"

        Fulfilled ->
            "FULFILLED"

        Restocked ->
            "RESTOCKED"

        PendingFulfillment ->
            "PENDING_FULFILLMENT"

        Open ->
            "OPEN"

        InProgress ->
            "IN_PROGRESS"

        OnHold ->
            "ON_HOLD"

        Scheduled ->
            "SCHEDULED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe OrderFulfillmentStatus
fromString enumString____ =
    case enumString____ of
        "UNFULFILLED" ->
            Just Unfulfilled

        "PARTIALLY_FULFILLED" ->
            Just PartiallyFulfilled

        "FULFILLED" ->
            Just Fulfilled

        "RESTOCKED" ->
            Just Restocked

        "PENDING_FULFILLMENT" ->
            Just PendingFulfillment

        "OPEN" ->
            Just Open

        "IN_PROGRESS" ->
            Just InProgress

        "ON_HOLD" ->
            Just OnHold

        "SCHEDULED" ->
            Just Scheduled

        _ ->
            Nothing
