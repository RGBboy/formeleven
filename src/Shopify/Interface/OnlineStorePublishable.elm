-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.Interface.OnlineStorePublishable exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode
import Shopify.InputObject
import Shopify.Interface
import Shopify.Object
import Shopify.Scalar
import Shopify.ScalarCodecs
import Shopify.Union


type alias Fragments decodesTo =
    { onArticle : SelectionSet decodesTo Shopify.Object.Article
    , onBlog : SelectionSet decodesTo Shopify.Object.Blog
    , onCollection : SelectionSet decodesTo Shopify.Object.Collection
    , onPage : SelectionSet decodesTo Shopify.Object.Page
    , onProduct : SelectionSet decodesTo Shopify.Object.Product
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Shopify.Interface.OnlineStorePublishable
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Article" selections____.onArticle
        , Object.buildFragment "Blog" selections____.onBlog
        , Object.buildFragment "Collection" selections____.onCollection
        , Object.buildFragment "Page" selections____.onPage
        , Object.buildFragment "Product" selections____.onProduct
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onArticle = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onBlog = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onCollection = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onPage = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onProduct = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
-}
onlineStoreUrl : SelectionSet (Maybe Shopify.ScalarCodecs.Url) Shopify.Interface.OnlineStorePublishable
onlineStoreUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Url)" "onlineStoreUrl" [] (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapCodecs |> .codecUrl |> .decoder |> Decode.nullable)
