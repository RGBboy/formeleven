-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Shopify.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Shopify.Enum.CountryCode
import Shopify.Enum.CropRegion
import Shopify.Enum.CurrencyCode
import Shopify.Enum.ImageContentType
import Shopify.Enum.PaymentTokenType
import Shopify.Interface
import Shopify.Object
import Shopify.Scalar
import Shopify.ScalarCodecs
import Shopify.Union


buildAttributeInput :
    AttributeInputRequiredFields
    -> AttributeInput
buildAttributeInput required____ =
    { key = required____.key, value = required____.value }


type alias AttributeInputRequiredFields =
    { key : String
    , value : String
    }


{-| Type for the AttributeInput input object.
-}
type alias AttributeInput =
    { key : String
    , value : String
    }


{-| Encode a AttributeInput into a value that can be used as an argument.
-}
encodeAttributeInput : AttributeInput -> Value
encodeAttributeInput input____ =
    Encode.maybeObject
        [ ( "key", Encode.string input____.key |> Just ), ( "value", Encode.string input____.value |> Just ) ]


buildCartBuyerIdentityInput :
    (CartBuyerIdentityInputOptionalFields -> CartBuyerIdentityInputOptionalFields)
    -> CartBuyerIdentityInput
buildCartBuyerIdentityInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { email = Absent, phone = Absent, countryCode = Absent, customerAccessToken = Absent }
    in
    { email = optionals____.email, phone = optionals____.phone, countryCode = optionals____.countryCode, customerAccessToken = optionals____.customerAccessToken }


type alias CartBuyerIdentityInputOptionalFields =
    { email : OptionalArgument String
    , phone : OptionalArgument String
    , countryCode : OptionalArgument Shopify.Enum.CountryCode.CountryCode
    , customerAccessToken : OptionalArgument String
    }


{-| Type for the CartBuyerIdentityInput input object.
-}
type alias CartBuyerIdentityInput =
    { email : OptionalArgument String
    , phone : OptionalArgument String
    , countryCode : OptionalArgument Shopify.Enum.CountryCode.CountryCode
    , customerAccessToken : OptionalArgument String
    }


{-| Encode a CartBuyerIdentityInput into a value that can be used as an argument.
-}
encodeCartBuyerIdentityInput : CartBuyerIdentityInput -> Value
encodeCartBuyerIdentityInput input____ =
    Encode.maybeObject
        [ ( "email", Encode.string |> Encode.optional input____.email ), ( "phone", Encode.string |> Encode.optional input____.phone ), ( "countryCode", Encode.enum Shopify.Enum.CountryCode.toString |> Encode.optional input____.countryCode ), ( "customerAccessToken", Encode.string |> Encode.optional input____.customerAccessToken ) ]


buildCartInput :
    (CartInputOptionalFields -> CartInputOptionalFields)
    -> CartInput
buildCartInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { attributes = Absent, lines = Absent, discountCodes = Absent, note = Absent, buyerIdentity = Absent }
    in
    { attributes = optionals____.attributes, lines = optionals____.lines, discountCodes = optionals____.discountCodes, note = optionals____.note, buyerIdentity = optionals____.buyerIdentity }


type alias CartInputOptionalFields =
    { attributes : OptionalArgument (List AttributeInput)
    , lines : OptionalArgument (List CartLineInput)
    , discountCodes : OptionalArgument (List String)
    , note : OptionalArgument String
    , buyerIdentity : OptionalArgument CartBuyerIdentityInput
    }


{-| Type for the CartInput input object.
-}
type alias CartInput =
    { attributes : OptionalArgument (List AttributeInput)
    , lines : OptionalArgument (List CartLineInput)
    , discountCodes : OptionalArgument (List String)
    , note : OptionalArgument String
    , buyerIdentity : OptionalArgument CartBuyerIdentityInput
    }


{-| Encode a CartInput into a value that can be used as an argument.
-}
encodeCartInput : CartInput -> Value
encodeCartInput input____ =
    Encode.maybeObject
        [ ( "attributes", (encodeAttributeInput |> Encode.list) |> Encode.optional input____.attributes ), ( "lines", (encodeCartLineInput |> Encode.list) |> Encode.optional input____.lines ), ( "discountCodes", (Encode.string |> Encode.list) |> Encode.optional input____.discountCodes ), ( "note", Encode.string |> Encode.optional input____.note ), ( "buyerIdentity", encodeCartBuyerIdentityInput |> Encode.optional input____.buyerIdentity ) ]


buildCartLineInput :
    CartLineInputRequiredFields
    -> (CartLineInputOptionalFields -> CartLineInputOptionalFields)
    -> CartLineInput
buildCartLineInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { attributes = Absent, quantity = Absent, sellingPlanId = Absent }
    in
    { attributes = optionals____.attributes, quantity = optionals____.quantity, merchandiseId = required____.merchandiseId, sellingPlanId = optionals____.sellingPlanId }


type alias CartLineInputRequiredFields =
    { merchandiseId : Shopify.ScalarCodecs.Id }


type alias CartLineInputOptionalFields =
    { attributes : OptionalArgument (List AttributeInput)
    , quantity : OptionalArgument Int
    , sellingPlanId : OptionalArgument Shopify.ScalarCodecs.Id
    }


{-| Type for the CartLineInput input object.
-}
type alias CartLineInput =
    { attributes : OptionalArgument (List AttributeInput)
    , quantity : OptionalArgument Int
    , merchandiseId : Shopify.ScalarCodecs.Id
    , sellingPlanId : OptionalArgument Shopify.ScalarCodecs.Id
    }


{-| Encode a CartLineInput into a value that can be used as an argument.
-}
encodeCartLineInput : CartLineInput -> Value
encodeCartLineInput input____ =
    Encode.maybeObject
        [ ( "attributes", (encodeAttributeInput |> Encode.list) |> Encode.optional input____.attributes ), ( "quantity", Encode.int |> Encode.optional input____.quantity ), ( "merchandiseId", (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) input____.merchandiseId |> Just ), ( "sellingPlanId", (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.sellingPlanId ) ]


buildCartLineUpdateInput :
    CartLineUpdateInputRequiredFields
    -> (CartLineUpdateInputOptionalFields -> CartLineUpdateInputOptionalFields)
    -> CartLineUpdateInput
buildCartLineUpdateInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { quantity = Absent, merchandiseId = Absent, attributes = Absent, sellingPlanId = Absent }
    in
    { id = required____.id, quantity = optionals____.quantity, merchandiseId = optionals____.merchandiseId, attributes = optionals____.attributes, sellingPlanId = optionals____.sellingPlanId }


type alias CartLineUpdateInputRequiredFields =
    { id : Shopify.ScalarCodecs.Id }


type alias CartLineUpdateInputOptionalFields =
    { quantity : OptionalArgument Int
    , merchandiseId : OptionalArgument Shopify.ScalarCodecs.Id
    , attributes : OptionalArgument (List AttributeInput)
    , sellingPlanId : OptionalArgument Shopify.ScalarCodecs.Id
    }


{-| Type for the CartLineUpdateInput input object.
-}
type alias CartLineUpdateInput =
    { id : Shopify.ScalarCodecs.Id
    , quantity : OptionalArgument Int
    , merchandiseId : OptionalArgument Shopify.ScalarCodecs.Id
    , attributes : OptionalArgument (List AttributeInput)
    , sellingPlanId : OptionalArgument Shopify.ScalarCodecs.Id
    }


{-| Encode a CartLineUpdateInput into a value that can be used as an argument.
-}
encodeCartLineUpdateInput : CartLineUpdateInput -> Value
encodeCartLineUpdateInput input____ =
    Encode.maybeObject
        [ ( "id", (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "quantity", Encode.int |> Encode.optional input____.quantity ), ( "merchandiseId", (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.merchandiseId ), ( "attributes", (encodeAttributeInput |> Encode.list) |> Encode.optional input____.attributes ), ( "sellingPlanId", (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.sellingPlanId ) ]


buildCheckoutAttributesUpdateV2Input :
    (CheckoutAttributesUpdateV2InputOptionalFields -> CheckoutAttributesUpdateV2InputOptionalFields)
    -> CheckoutAttributesUpdateV2Input
buildCheckoutAttributesUpdateV2Input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { note = Absent, customAttributes = Absent, allowPartialAddresses = Absent }
    in
    { note = optionals____.note, customAttributes = optionals____.customAttributes, allowPartialAddresses = optionals____.allowPartialAddresses }


type alias CheckoutAttributesUpdateV2InputOptionalFields =
    { note : OptionalArgument String
    , customAttributes : OptionalArgument (List AttributeInput)
    , allowPartialAddresses : OptionalArgument Bool
    }


{-| Type for the CheckoutAttributesUpdateV2Input input object.
-}
type alias CheckoutAttributesUpdateV2Input =
    { note : OptionalArgument String
    , customAttributes : OptionalArgument (List AttributeInput)
    , allowPartialAddresses : OptionalArgument Bool
    }


{-| Encode a CheckoutAttributesUpdateV2Input into a value that can be used as an argument.
-}
encodeCheckoutAttributesUpdateV2Input : CheckoutAttributesUpdateV2Input -> Value
encodeCheckoutAttributesUpdateV2Input input____ =
    Encode.maybeObject
        [ ( "note", Encode.string |> Encode.optional input____.note ), ( "customAttributes", (encodeAttributeInput |> Encode.list) |> Encode.optional input____.customAttributes ), ( "allowPartialAddresses", Encode.bool |> Encode.optional input____.allowPartialAddresses ) ]


buildCheckoutBuyerIdentityInput :
    CheckoutBuyerIdentityInputRequiredFields
    -> CheckoutBuyerIdentityInput
buildCheckoutBuyerIdentityInput required____ =
    { countryCode = required____.countryCode }


type alias CheckoutBuyerIdentityInputRequiredFields =
    { countryCode : Shopify.Enum.CountryCode.CountryCode }


{-| Type for the CheckoutBuyerIdentityInput input object.
-}
type alias CheckoutBuyerIdentityInput =
    { countryCode : Shopify.Enum.CountryCode.CountryCode }


{-| Encode a CheckoutBuyerIdentityInput into a value that can be used as an argument.
-}
encodeCheckoutBuyerIdentityInput : CheckoutBuyerIdentityInput -> Value
encodeCheckoutBuyerIdentityInput input____ =
    Encode.maybeObject
        [ ( "countryCode", Encode.enum Shopify.Enum.CountryCode.toString input____.countryCode |> Just ) ]


buildCheckoutCreateInput :
    (CheckoutCreateInputOptionalFields -> CheckoutCreateInputOptionalFields)
    -> CheckoutCreateInput
buildCheckoutCreateInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { email = Absent, lineItems = Absent, shippingAddress = Absent, note = Absent, customAttributes = Absent, allowPartialAddresses = Absent, buyerIdentity = Absent }
    in
    { email = optionals____.email, lineItems = optionals____.lineItems, shippingAddress = optionals____.shippingAddress, note = optionals____.note, customAttributes = optionals____.customAttributes, allowPartialAddresses = optionals____.allowPartialAddresses, buyerIdentity = optionals____.buyerIdentity }


type alias CheckoutCreateInputOptionalFields =
    { email : OptionalArgument String
    , lineItems : OptionalArgument (List CheckoutLineItemInput)
    , shippingAddress : OptionalArgument MailingAddressInput
    , note : OptionalArgument String
    , customAttributes : OptionalArgument (List AttributeInput)
    , allowPartialAddresses : OptionalArgument Bool
    , buyerIdentity : OptionalArgument CheckoutBuyerIdentityInput
    }


{-| Type for the CheckoutCreateInput input object.
-}
type alias CheckoutCreateInput =
    { email : OptionalArgument String
    , lineItems : OptionalArgument (List CheckoutLineItemInput)
    , shippingAddress : OptionalArgument MailingAddressInput
    , note : OptionalArgument String
    , customAttributes : OptionalArgument (List AttributeInput)
    , allowPartialAddresses : OptionalArgument Bool
    , buyerIdentity : OptionalArgument CheckoutBuyerIdentityInput
    }


{-| Encode a CheckoutCreateInput into a value that can be used as an argument.
-}
encodeCheckoutCreateInput : CheckoutCreateInput -> Value
encodeCheckoutCreateInput input____ =
    Encode.maybeObject
        [ ( "email", Encode.string |> Encode.optional input____.email ), ( "lineItems", (encodeCheckoutLineItemInput |> Encode.list) |> Encode.optional input____.lineItems ), ( "shippingAddress", encodeMailingAddressInput |> Encode.optional input____.shippingAddress ), ( "note", Encode.string |> Encode.optional input____.note ), ( "customAttributes", (encodeAttributeInput |> Encode.list) |> Encode.optional input____.customAttributes ), ( "allowPartialAddresses", Encode.bool |> Encode.optional input____.allowPartialAddresses ), ( "buyerIdentity", encodeCheckoutBuyerIdentityInput |> Encode.optional input____.buyerIdentity ) ]


buildCheckoutLineItemInput :
    CheckoutLineItemInputRequiredFields
    -> (CheckoutLineItemInputOptionalFields -> CheckoutLineItemInputOptionalFields)
    -> CheckoutLineItemInput
buildCheckoutLineItemInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { customAttributes = Absent }
    in
    { customAttributes = optionals____.customAttributes, quantity = required____.quantity, variantId = required____.variantId }


type alias CheckoutLineItemInputRequiredFields =
    { quantity : Int
    , variantId : Shopify.ScalarCodecs.Id
    }


type alias CheckoutLineItemInputOptionalFields =
    { customAttributes : OptionalArgument (List AttributeInput) }


{-| Type for the CheckoutLineItemInput input object.
-}
type alias CheckoutLineItemInput =
    { customAttributes : OptionalArgument (List AttributeInput)
    , quantity : Int
    , variantId : Shopify.ScalarCodecs.Id
    }


{-| Encode a CheckoutLineItemInput into a value that can be used as an argument.
-}
encodeCheckoutLineItemInput : CheckoutLineItemInput -> Value
encodeCheckoutLineItemInput input____ =
    Encode.maybeObject
        [ ( "customAttributes", (encodeAttributeInput |> Encode.list) |> Encode.optional input____.customAttributes ), ( "quantity", Encode.int input____.quantity |> Just ), ( "variantId", (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) input____.variantId |> Just ) ]


buildCheckoutLineItemUpdateInput :
    (CheckoutLineItemUpdateInputOptionalFields -> CheckoutLineItemUpdateInputOptionalFields)
    -> CheckoutLineItemUpdateInput
buildCheckoutLineItemUpdateInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, variantId = Absent, quantity = Absent, customAttributes = Absent }
    in
    { id = optionals____.id, variantId = optionals____.variantId, quantity = optionals____.quantity, customAttributes = optionals____.customAttributes }


type alias CheckoutLineItemUpdateInputOptionalFields =
    { id : OptionalArgument Shopify.ScalarCodecs.Id
    , variantId : OptionalArgument Shopify.ScalarCodecs.Id
    , quantity : OptionalArgument Int
    , customAttributes : OptionalArgument (List AttributeInput)
    }


{-| Type for the CheckoutLineItemUpdateInput input object.
-}
type alias CheckoutLineItemUpdateInput =
    { id : OptionalArgument Shopify.ScalarCodecs.Id
    , variantId : OptionalArgument Shopify.ScalarCodecs.Id
    , quantity : OptionalArgument Int
    , customAttributes : OptionalArgument (List AttributeInput)
    }


{-| Encode a CheckoutLineItemUpdateInput into a value that can be used as an argument.
-}
encodeCheckoutLineItemUpdateInput : CheckoutLineItemUpdateInput -> Value
encodeCheckoutLineItemUpdateInput input____ =
    Encode.maybeObject
        [ ( "id", (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "variantId", (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.variantId ), ( "quantity", Encode.int |> Encode.optional input____.quantity ), ( "customAttributes", (encodeAttributeInput |> Encode.list) |> Encode.optional input____.customAttributes ) ]


buildCreditCardPaymentInputV2 :
    CreditCardPaymentInputV2RequiredFields
    -> (CreditCardPaymentInputV2OptionalFields -> CreditCardPaymentInputV2OptionalFields)
    -> CreditCardPaymentInputV2
buildCreditCardPaymentInputV2 required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { test = Absent }
    in
    { paymentAmount = required____.paymentAmount, idempotencyKey = required____.idempotencyKey, billingAddress = required____.billingAddress, vaultId = required____.vaultId, test = optionals____.test }


type alias CreditCardPaymentInputV2RequiredFields =
    { paymentAmount : MoneyInput
    , idempotencyKey : String
    , billingAddress : MailingAddressInput
    , vaultId : String
    }


type alias CreditCardPaymentInputV2OptionalFields =
    { test : OptionalArgument Bool }


{-| Type for the CreditCardPaymentInputV2 input object.
-}
type alias CreditCardPaymentInputV2 =
    { paymentAmount : MoneyInput
    , idempotencyKey : String
    , billingAddress : MailingAddressInput
    , vaultId : String
    , test : OptionalArgument Bool
    }


{-| Encode a CreditCardPaymentInputV2 into a value that can be used as an argument.
-}
encodeCreditCardPaymentInputV2 : CreditCardPaymentInputV2 -> Value
encodeCreditCardPaymentInputV2 input____ =
    Encode.maybeObject
        [ ( "paymentAmount", encodeMoneyInput input____.paymentAmount |> Just ), ( "idempotencyKey", Encode.string input____.idempotencyKey |> Just ), ( "billingAddress", encodeMailingAddressInput input____.billingAddress |> Just ), ( "vaultId", Encode.string input____.vaultId |> Just ), ( "test", Encode.bool |> Encode.optional input____.test ) ]


buildCustomerAccessTokenCreateInput :
    CustomerAccessTokenCreateInputRequiredFields
    -> CustomerAccessTokenCreateInput
buildCustomerAccessTokenCreateInput required____ =
    { email = required____.email, password = required____.password }


type alias CustomerAccessTokenCreateInputRequiredFields =
    { email : String
    , password : String
    }


{-| Type for the CustomerAccessTokenCreateInput input object.
-}
type alias CustomerAccessTokenCreateInput =
    { email : String
    , password : String
    }


{-| Encode a CustomerAccessTokenCreateInput into a value that can be used as an argument.
-}
encodeCustomerAccessTokenCreateInput : CustomerAccessTokenCreateInput -> Value
encodeCustomerAccessTokenCreateInput input____ =
    Encode.maybeObject
        [ ( "email", Encode.string input____.email |> Just ), ( "password", Encode.string input____.password |> Just ) ]


buildCustomerActivateInput :
    CustomerActivateInputRequiredFields
    -> CustomerActivateInput
buildCustomerActivateInput required____ =
    { activationToken = required____.activationToken, password = required____.password }


type alias CustomerActivateInputRequiredFields =
    { activationToken : String
    , password : String
    }


{-| Type for the CustomerActivateInput input object.
-}
type alias CustomerActivateInput =
    { activationToken : String
    , password : String
    }


{-| Encode a CustomerActivateInput into a value that can be used as an argument.
-}
encodeCustomerActivateInput : CustomerActivateInput -> Value
encodeCustomerActivateInput input____ =
    Encode.maybeObject
        [ ( "activationToken", Encode.string input____.activationToken |> Just ), ( "password", Encode.string input____.password |> Just ) ]


buildCustomerCreateInput :
    CustomerCreateInputRequiredFields
    -> (CustomerCreateInputOptionalFields -> CustomerCreateInputOptionalFields)
    -> CustomerCreateInput
buildCustomerCreateInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { firstName = Absent, lastName = Absent, phone = Absent, acceptsMarketing = Absent }
    in
    { firstName = optionals____.firstName, lastName = optionals____.lastName, email = required____.email, phone = optionals____.phone, password = required____.password, acceptsMarketing = optionals____.acceptsMarketing }


type alias CustomerCreateInputRequiredFields =
    { email : String
    , password : String
    }


type alias CustomerCreateInputOptionalFields =
    { firstName : OptionalArgument String
    , lastName : OptionalArgument String
    , phone : OptionalArgument String
    , acceptsMarketing : OptionalArgument Bool
    }


{-| Type for the CustomerCreateInput input object.
-}
type alias CustomerCreateInput =
    { firstName : OptionalArgument String
    , lastName : OptionalArgument String
    , email : String
    , phone : OptionalArgument String
    , password : String
    , acceptsMarketing : OptionalArgument Bool
    }


{-| Encode a CustomerCreateInput into a value that can be used as an argument.
-}
encodeCustomerCreateInput : CustomerCreateInput -> Value
encodeCustomerCreateInput input____ =
    Encode.maybeObject
        [ ( "firstName", Encode.string |> Encode.optional input____.firstName ), ( "lastName", Encode.string |> Encode.optional input____.lastName ), ( "email", Encode.string input____.email |> Just ), ( "phone", Encode.string |> Encode.optional input____.phone ), ( "password", Encode.string input____.password |> Just ), ( "acceptsMarketing", Encode.bool |> Encode.optional input____.acceptsMarketing ) ]


buildCustomerResetInput :
    CustomerResetInputRequiredFields
    -> CustomerResetInput
buildCustomerResetInput required____ =
    { resetToken = required____.resetToken, password = required____.password }


type alias CustomerResetInputRequiredFields =
    { resetToken : String
    , password : String
    }


{-| Type for the CustomerResetInput input object.
-}
type alias CustomerResetInput =
    { resetToken : String
    , password : String
    }


{-| Encode a CustomerResetInput into a value that can be used as an argument.
-}
encodeCustomerResetInput : CustomerResetInput -> Value
encodeCustomerResetInput input____ =
    Encode.maybeObject
        [ ( "resetToken", Encode.string input____.resetToken |> Just ), ( "password", Encode.string input____.password |> Just ) ]


buildCustomerUpdateInput :
    (CustomerUpdateInputOptionalFields -> CustomerUpdateInputOptionalFields)
    -> CustomerUpdateInput
buildCustomerUpdateInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { firstName = Absent, lastName = Absent, email = Absent, phone = Absent, password = Absent, acceptsMarketing = Absent }
    in
    { firstName = optionals____.firstName, lastName = optionals____.lastName, email = optionals____.email, phone = optionals____.phone, password = optionals____.password, acceptsMarketing = optionals____.acceptsMarketing }


type alias CustomerUpdateInputOptionalFields =
    { firstName : OptionalArgument String
    , lastName : OptionalArgument String
    , email : OptionalArgument String
    , phone : OptionalArgument String
    , password : OptionalArgument String
    , acceptsMarketing : OptionalArgument Bool
    }


{-| Type for the CustomerUpdateInput input object.
-}
type alias CustomerUpdateInput =
    { firstName : OptionalArgument String
    , lastName : OptionalArgument String
    , email : OptionalArgument String
    , phone : OptionalArgument String
    , password : OptionalArgument String
    , acceptsMarketing : OptionalArgument Bool
    }


{-| Encode a CustomerUpdateInput into a value that can be used as an argument.
-}
encodeCustomerUpdateInput : CustomerUpdateInput -> Value
encodeCustomerUpdateInput input____ =
    Encode.maybeObject
        [ ( "firstName", Encode.string |> Encode.optional input____.firstName ), ( "lastName", Encode.string |> Encode.optional input____.lastName ), ( "email", Encode.string |> Encode.optional input____.email ), ( "phone", Encode.string |> Encode.optional input____.phone ), ( "password", Encode.string |> Encode.optional input____.password ), ( "acceptsMarketing", Encode.bool |> Encode.optional input____.acceptsMarketing ) ]


buildGeoCoordinateInput :
    GeoCoordinateInputRequiredFields
    -> GeoCoordinateInput
buildGeoCoordinateInput required____ =
    { latitude = required____.latitude, longitude = required____.longitude }


type alias GeoCoordinateInputRequiredFields =
    { latitude : Float
    , longitude : Float
    }


{-| Type for the GeoCoordinateInput input object.
-}
type alias GeoCoordinateInput =
    { latitude : Float
    , longitude : Float
    }


{-| Encode a GeoCoordinateInput into a value that can be used as an argument.
-}
encodeGeoCoordinateInput : GeoCoordinateInput -> Value
encodeGeoCoordinateInput input____ =
    Encode.maybeObject
        [ ( "latitude", Encode.float input____.latitude |> Just ), ( "longitude", Encode.float input____.longitude |> Just ) ]


buildHasMetafieldsIdentifier :
    HasMetafieldsIdentifierRequiredFields
    -> HasMetafieldsIdentifier
buildHasMetafieldsIdentifier required____ =
    { namespace = required____.namespace, key = required____.key }


type alias HasMetafieldsIdentifierRequiredFields =
    { namespace : String
    , key : String
    }


{-| Type for the HasMetafieldsIdentifier input object.
-}
type alias HasMetafieldsIdentifier =
    { namespace : String
    , key : String
    }


{-| Encode a HasMetafieldsIdentifier into a value that can be used as an argument.
-}
encodeHasMetafieldsIdentifier : HasMetafieldsIdentifier -> Value
encodeHasMetafieldsIdentifier input____ =
    Encode.maybeObject
        [ ( "namespace", Encode.string input____.namespace |> Just ), ( "key", Encode.string input____.key |> Just ) ]


buildImageTransformInput :
    (ImageTransformInputOptionalFields -> ImageTransformInputOptionalFields)
    -> ImageTransformInput
buildImageTransformInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { crop = Absent, maxWidth = Absent, maxHeight = Absent, scale = Absent, preferredContentType = Absent }
    in
    { crop = optionals____.crop, maxWidth = optionals____.maxWidth, maxHeight = optionals____.maxHeight, scale = optionals____.scale, preferredContentType = optionals____.preferredContentType }


type alias ImageTransformInputOptionalFields =
    { crop : OptionalArgument Shopify.Enum.CropRegion.CropRegion
    , maxWidth : OptionalArgument Int
    , maxHeight : OptionalArgument Int
    , scale : OptionalArgument Int
    , preferredContentType : OptionalArgument Shopify.Enum.ImageContentType.ImageContentType
    }


{-| Type for the ImageTransformInput input object.
-}
type alias ImageTransformInput =
    { crop : OptionalArgument Shopify.Enum.CropRegion.CropRegion
    , maxWidth : OptionalArgument Int
    , maxHeight : OptionalArgument Int
    , scale : OptionalArgument Int
    , preferredContentType : OptionalArgument Shopify.Enum.ImageContentType.ImageContentType
    }


{-| Encode a ImageTransformInput into a value that can be used as an argument.
-}
encodeImageTransformInput : ImageTransformInput -> Value
encodeImageTransformInput input____ =
    Encode.maybeObject
        [ ( "crop", Encode.enum Shopify.Enum.CropRegion.toString |> Encode.optional input____.crop ), ( "maxWidth", Encode.int |> Encode.optional input____.maxWidth ), ( "maxHeight", Encode.int |> Encode.optional input____.maxHeight ), ( "scale", Encode.int |> Encode.optional input____.scale ), ( "preferredContentType", Encode.enum Shopify.Enum.ImageContentType.toString |> Encode.optional input____.preferredContentType ) ]


buildMailingAddressInput :
    (MailingAddressInputOptionalFields -> MailingAddressInputOptionalFields)
    -> MailingAddressInput
buildMailingAddressInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { address1 = Absent, address2 = Absent, city = Absent, company = Absent, country = Absent, firstName = Absent, lastName = Absent, phone = Absent, province = Absent, zip = Absent }
    in
    { address1 = optionals____.address1, address2 = optionals____.address2, city = optionals____.city, company = optionals____.company, country = optionals____.country, firstName = optionals____.firstName, lastName = optionals____.lastName, phone = optionals____.phone, province = optionals____.province, zip = optionals____.zip }


type alias MailingAddressInputOptionalFields =
    { address1 : OptionalArgument String
    , address2 : OptionalArgument String
    , city : OptionalArgument String
    , company : OptionalArgument String
    , country : OptionalArgument String
    , firstName : OptionalArgument String
    , lastName : OptionalArgument String
    , phone : OptionalArgument String
    , province : OptionalArgument String
    , zip : OptionalArgument String
    }


{-| Type for the MailingAddressInput input object.
-}
type alias MailingAddressInput =
    { address1 : OptionalArgument String
    , address2 : OptionalArgument String
    , city : OptionalArgument String
    , company : OptionalArgument String
    , country : OptionalArgument String
    , firstName : OptionalArgument String
    , lastName : OptionalArgument String
    , phone : OptionalArgument String
    , province : OptionalArgument String
    , zip : OptionalArgument String
    }


{-| Encode a MailingAddressInput into a value that can be used as an argument.
-}
encodeMailingAddressInput : MailingAddressInput -> Value
encodeMailingAddressInput input____ =
    Encode.maybeObject
        [ ( "address1", Encode.string |> Encode.optional input____.address1 ), ( "address2", Encode.string |> Encode.optional input____.address2 ), ( "city", Encode.string |> Encode.optional input____.city ), ( "company", Encode.string |> Encode.optional input____.company ), ( "country", Encode.string |> Encode.optional input____.country ), ( "firstName", Encode.string |> Encode.optional input____.firstName ), ( "lastName", Encode.string |> Encode.optional input____.lastName ), ( "phone", Encode.string |> Encode.optional input____.phone ), ( "province", Encode.string |> Encode.optional input____.province ), ( "zip", Encode.string |> Encode.optional input____.zip ) ]


buildMetafieldFilter :
    MetafieldFilterRequiredFields
    -> MetafieldFilter
buildMetafieldFilter required____ =
    { namespace = required____.namespace, key = required____.key, value = required____.value }


type alias MetafieldFilterRequiredFields =
    { namespace : String
    , key : String
    , value : String
    }


{-| Type for the MetafieldFilter input object.
-}
type alias MetafieldFilter =
    { namespace : String
    , key : String
    , value : String
    }


{-| Encode a MetafieldFilter into a value that can be used as an argument.
-}
encodeMetafieldFilter : MetafieldFilter -> Value
encodeMetafieldFilter input____ =
    Encode.maybeObject
        [ ( "namespace", Encode.string input____.namespace |> Just ), ( "key", Encode.string input____.key |> Just ), ( "value", Encode.string input____.value |> Just ) ]


buildMoneyInput :
    MoneyInputRequiredFields
    -> MoneyInput
buildMoneyInput required____ =
    { amount = required____.amount, currencyCode = required____.currencyCode }


type alias MoneyInputRequiredFields =
    { amount : Shopify.ScalarCodecs.Decimal
    , currencyCode : Shopify.Enum.CurrencyCode.CurrencyCode
    }


{-| Type for the MoneyInput input object.
-}
type alias MoneyInput =
    { amount : Shopify.ScalarCodecs.Decimal
    , currencyCode : Shopify.Enum.CurrencyCode.CurrencyCode
    }


{-| Encode a MoneyInput into a value that can be used as an argument.
-}
encodeMoneyInput : MoneyInput -> Value
encodeMoneyInput input____ =
    Encode.maybeObject
        [ ( "amount", (Shopify.ScalarCodecs.codecs |> Shopify.Scalar.unwrapEncoder .codecDecimal) input____.amount |> Just ), ( "currencyCode", Encode.enum Shopify.Enum.CurrencyCode.toString input____.currencyCode |> Just ) ]


buildPriceRangeFilter :
    (PriceRangeFilterOptionalFields -> PriceRangeFilterOptionalFields)
    -> PriceRangeFilter
buildPriceRangeFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { min = Absent, max = Absent }
    in
    { min = optionals____.min, max = optionals____.max }


type alias PriceRangeFilterOptionalFields =
    { min : OptionalArgument Float
    , max : OptionalArgument Float
    }


{-| Type for the PriceRangeFilter input object.
-}
type alias PriceRangeFilter =
    { min : OptionalArgument Float
    , max : OptionalArgument Float
    }


{-| Encode a PriceRangeFilter into a value that can be used as an argument.
-}
encodePriceRangeFilter : PriceRangeFilter -> Value
encodePriceRangeFilter input____ =
    Encode.maybeObject
        [ ( "min", Encode.float |> Encode.optional input____.min ), ( "max", Encode.float |> Encode.optional input____.max ) ]


buildProductFilter :
    (ProductFilterOptionalFields -> ProductFilterOptionalFields)
    -> ProductFilter
buildProductFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { available = Absent, variantOption = Absent, productType = Absent, productVendor = Absent, price = Absent, productMetafield = Absent, variantMetafield = Absent }
    in
    { available = optionals____.available, variantOption = optionals____.variantOption, productType = optionals____.productType, productVendor = optionals____.productVendor, price = optionals____.price, productMetafield = optionals____.productMetafield, variantMetafield = optionals____.variantMetafield }


type alias ProductFilterOptionalFields =
    { available : OptionalArgument Bool
    , variantOption : OptionalArgument VariantOptionFilter
    , productType : OptionalArgument String
    , productVendor : OptionalArgument String
    , price : OptionalArgument PriceRangeFilter
    , productMetafield : OptionalArgument MetafieldFilter
    , variantMetafield : OptionalArgument MetafieldFilter
    }


{-| Type for the ProductFilter input object.
-}
type alias ProductFilter =
    { available : OptionalArgument Bool
    , variantOption : OptionalArgument VariantOptionFilter
    , productType : OptionalArgument String
    , productVendor : OptionalArgument String
    , price : OptionalArgument PriceRangeFilter
    , productMetafield : OptionalArgument MetafieldFilter
    , variantMetafield : OptionalArgument MetafieldFilter
    }


{-| Encode a ProductFilter into a value that can be used as an argument.
-}
encodeProductFilter : ProductFilter -> Value
encodeProductFilter input____ =
    Encode.maybeObject
        [ ( "available", Encode.bool |> Encode.optional input____.available ), ( "variantOption", encodeVariantOptionFilter |> Encode.optional input____.variantOption ), ( "productType", Encode.string |> Encode.optional input____.productType ), ( "productVendor", Encode.string |> Encode.optional input____.productVendor ), ( "price", encodePriceRangeFilter |> Encode.optional input____.price ), ( "productMetafield", encodeMetafieldFilter |> Encode.optional input____.productMetafield ), ( "variantMetafield", encodeMetafieldFilter |> Encode.optional input____.variantMetafield ) ]


buildSelectedOptionInput :
    SelectedOptionInputRequiredFields
    -> SelectedOptionInput
buildSelectedOptionInput required____ =
    { name = required____.name, value = required____.value }


type alias SelectedOptionInputRequiredFields =
    { name : String
    , value : String
    }


{-| Type for the SelectedOptionInput input object.
-}
type alias SelectedOptionInput =
    { name : String
    , value : String
    }


{-| Encode a SelectedOptionInput into a value that can be used as an argument.
-}
encodeSelectedOptionInput : SelectedOptionInput -> Value
encodeSelectedOptionInput input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ), ( "value", Encode.string input____.value |> Just ) ]


buildTokenizedPaymentInputV3 :
    TokenizedPaymentInputV3RequiredFields
    -> (TokenizedPaymentInputV3OptionalFields -> TokenizedPaymentInputV3OptionalFields)
    -> TokenizedPaymentInputV3
buildTokenizedPaymentInputV3 required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { test = Absent, identifier = Absent }
    in
    { paymentAmount = required____.paymentAmount, idempotencyKey = required____.idempotencyKey, billingAddress = required____.billingAddress, paymentData = required____.paymentData, test = optionals____.test, identifier = optionals____.identifier, type_ = required____.type_ }


type alias TokenizedPaymentInputV3RequiredFields =
    { paymentAmount : MoneyInput
    , idempotencyKey : String
    , billingAddress : MailingAddressInput
    , paymentData : String
    , type_ : Shopify.Enum.PaymentTokenType.PaymentTokenType
    }


type alias TokenizedPaymentInputV3OptionalFields =
    { test : OptionalArgument Bool
    , identifier : OptionalArgument String
    }


{-| Type for the TokenizedPaymentInputV3 input object.
-}
type alias TokenizedPaymentInputV3 =
    { paymentAmount : MoneyInput
    , idempotencyKey : String
    , billingAddress : MailingAddressInput
    , paymentData : String
    , test : OptionalArgument Bool
    , identifier : OptionalArgument String
    , type_ : Shopify.Enum.PaymentTokenType.PaymentTokenType
    }


{-| Encode a TokenizedPaymentInputV3 into a value that can be used as an argument.
-}
encodeTokenizedPaymentInputV3 : TokenizedPaymentInputV3 -> Value
encodeTokenizedPaymentInputV3 input____ =
    Encode.maybeObject
        [ ( "paymentAmount", encodeMoneyInput input____.paymentAmount |> Just ), ( "idempotencyKey", Encode.string input____.idempotencyKey |> Just ), ( "billingAddress", encodeMailingAddressInput input____.billingAddress |> Just ), ( "paymentData", Encode.string input____.paymentData |> Just ), ( "test", Encode.bool |> Encode.optional input____.test ), ( "identifier", Encode.string |> Encode.optional input____.identifier ), ( "type", Encode.enum Shopify.Enum.PaymentTokenType.toString input____.type_ |> Just ) ]


buildVariantOptionFilter :
    VariantOptionFilterRequiredFields
    -> VariantOptionFilter
buildVariantOptionFilter required____ =
    { name = required____.name, value = required____.value }


type alias VariantOptionFilterRequiredFields =
    { name : String
    , value : String
    }


{-| Type for the VariantOptionFilter input object.
-}
type alias VariantOptionFilter =
    { name : String
    , value : String
    }


{-| Encode a VariantOptionFilter into a value that can be used as an argument.
-}
encodeVariantOptionFilter : VariantOptionFilter -> Value
encodeVariantOptionFilter input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ), ( "value", Encode.string input____.value |> Just ) ]
